import { html } from 'lit';
import { classMap } from 'lit/directives/class-map.js';
import { ifDefined } from 'lit/directives/if-defined.js';
import { styleMap } from "lit/directives/style-map.js";

import { useArgs } from "@storybook/client-api";

import "@spectrum-css/{{ folderName }}";

export const Template = ({
  rootClass = "spectrum-{{ pascalCase name }}",
  size = "m",
	isSelected = false,
	isDisabled = false,
	isFocused = false,
  id,
	testId,
  customClasses = [],
	customStyles = {},
	content = [],
}) => {
	const [, updateArgs] = useArgs();

  return html`
    <div
      class=${classMap({
        [rootClass]: true,
        [`${rootClass}--size${size.toUpperCase()}`]: typeof size !== "undefined",
				"is-selected": !isDisabled && isSelected,
				"is-disabled": isDisabled,
				"is-focused": isFocused,
        ...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),
      })}
      style=${styleMap(customStyles)}
			?disabled=${isDisabled}
      id=${ifDefined(id)}
			data-testid=${ifDefined(testId)}
			@click=${() => updateArgs({ isSelected: !isSelected })}
			@focusin=${() => {
				updateArgs({ isFocused: true });
			}}
			@focusout=${() => updateArgs({ isFocused: false })}
			@keypress=${(e) => {
				if (e.key !== "Enter" && e.key !== " ") return;
				updateArgs({ isSelected: !isSelected });
			}}
    >
      ${content.map((c) => (typeof c === "function" ? c({}) : c))}
    </div>`;
};
