{"version":3,"file":"rating-stories-rating-stories.1a6f6aab.iframe.bundle.js","mappings":";;AAoCA;AAOA;AACA;AAGA;;;AAKA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAWA;;AAIA;AAMA;;AAIA;AAKA;;;;AASA","sources":["webpack://@spectrum-css/preview/../components/rating/stories/template.js"],"sourcesContent":["import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { repeat } from \"lit/directives/repeat.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\n\nimport { useArgs } from \"@storybook/client-api\";\n\n// Uncomment if you plan to include an icon\nimport { Template as Icon } from \"@spectrum-css/icon/stories/template.js\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-Rating\",\n\tmax = 5,\n\tvalue = 0,\n\tisReadOnly = false,\n\tisFocused = false,\n\tisDisabled = true,\n\tisEmphasized = false,\n\tcustomClasses = [],\n\tid,\n\t...globals\n}) => {\n\tconst { express } = globals;\n\ttry {\n\t\tif (express) import(/* webpackPrefetch: true */ \"../themes/express.css\");\n\t\telse import(/* webpackPrefetch: true */ \"../themes/spectrum.css\");\n\t} catch (e) {\n\t\tconsole.warn(e);\n\t}\n\n\tconst [, updateArgs] = useArgs();\n\n\treturn html`\n\t\t<div\n\t\t\tclass=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t\"is-disabled\": isDisabled,\n\t\t\t\t\"is-readOnly\": isReadOnly,\n\t\t\t\t[`${rootClass}--emphasized`]: isEmphasized,\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n\t\t\tid=${ifDefined(id)}\n\t\t\t@focusin=${() => {\n\t\t\t\tupdateArgs({ isFocused: true });\n\t\t\t}}\n\t\t\t@focusout=${() => {\n\t\t\t\tupdateArgs({ isFocused: false });\n\t\t\t}}\n\t\t>\n\t\t\t<input\n\t\t\t\tclass=\"${rootClass}-input\"\n\t\t\t\ttype=\"range\"\n\t\t\t\tmin=\"0\"\n\t\t\t\tmax=${max}\n\t\t\t\tvalue=${value}\n\t\t\t\taria-label=\"Rating\"\n\t\t\t\t?readonly=${isReadOnly}\n\t\t\t\t?disabled=${isDisabled}\n\t\t\t\t@change=${(e) => {\n\t\t\t\t\tconst rating = e.target.closest(`.${rootClass}`);\n\t\t\t\t\tif (!rating) return;\n\n\t\t\t\t\tconst input = rating.closest(`.${rootClass}-input`);\n\t\t\t\t\tif (!input) return;\n\t\t\t\t\tif (!isReadOnly && !isDisabled) {\n\t\t\t\t\t\tupdateArgs({ value: parseInt(input.value, 10) });\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t/>\n\t\t\t${repeat(\n\t\t\t\tArray(max).fill(0),\n\t\t\t\t(_, idx) => html`\n\t\t\t\t\t<span\n\t\t\t\t\t\tclass=${classMap({\n\t\t\t\t\t\t\t[`${rootClass}-icon`]: true,\n\t\t\t\t\t\t\t\"is-selected\": !isDisabled && idx <= value - 1,\n\t\t\t\t\t\t\t\"is-currentValue\":\n\t\t\t\t\t\t\t\t!isDisabled && !isReadOnly && idx === value - 1,\n\t\t\t\t\t\t})}\n\t\t\t\t\t\t@click=${(e) => {\n\t\t\t\t\t\t\tupdateArgs({ value: idx + 1, isFocused: true });\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t${Icon({\n\t\t\t\t\t\t\t...globals,\n\t\t\t\t\t\t\ticonName: \"Star\",\n\t\t\t\t\t\t\tcustomClasses: [`${rootClass}-starActive`],\n\t\t\t\t\t\t})}\n\t\t\t\t\t\t${Icon({\n\t\t\t\t\t\t\t...globals,\n\t\t\t\t\t\t\ticonName: \"StarOutline\",\n\t\t\t\t\t\t\tcustomClasses: [`${rootClass}-starInactive`],\n\t\t\t\t\t\t})}\n\t\t\t\t\t</span>\n\t\t\t\t`\n\t\t\t)}\n\t\t</div>\n\t`;\n};\n"],"names":[],"sourceRoot":""}