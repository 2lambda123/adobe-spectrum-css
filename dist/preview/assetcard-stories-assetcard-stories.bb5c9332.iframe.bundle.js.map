{"version":3,"file":"assetcard-stories-assetcard-stories.bb5c9332.iframe.bundle.js","mappings":";;;AA8CA;AASA;AACA;;;;AAMA;AACA;AACA;;AAEA;AAGA;AAIA;AAIA;;;AAKA;AAIA;AACA;;;AAjDA;;AC8GA;AAIA;AAIA;AAIA;AAIA;;AAUA;;ACpHA;AAWA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;;AAEA;AACA;AAMA;;AAOA;;AAKA","sources":["webpack://@spectrum-css/preview/../components/assetcard/stories/template.js","webpack://@spectrum-css/preview/","webpack://@spectrum-css/preview/../components/checkbox/stories/template.js"],"sourcesContent":["import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { when } from \"lit/directives/when.js\";\n\nimport { useArgs } from \"@storybook/client-api\";\nimport { camelCase } from \"lodash-es\";\n\nimport { Template as Checkbox } from \"@spectrum-css/checkbox/stories/template.js\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-AssetCard\",\n\timage,\n\texampleImage,\n\ttitle,\n\theaderContent,\n\tcontent = [],\n\tselection = \"checkbox\",\n\tisSelected = false,\n\tisFocused = false,\n\tisDropTarget = false,\n\tcustomClasses = [],\n\tid,\n\t...globals\n}) => {\n\tconst [_, updateArgs] = useArgs();\n\tconst { express } = globals;\n\n\ttry {\n\t\tif (!express) import(/* webpackPrefetch: true */ \"../themes/spectrum.css\");\n\t\telse import(/* webpackPrefetch: true */ \"../themes/express.css\");\n\t} catch (e) {\n\t\tconsole.warn(e);\n\t}\n\n\tif (!image && !exampleImage) {\n\t\tconsole.warn(\"AssetCard: image is required\");\n\t\treturn html``;\n\t}\n\n\tif (exampleImage) exampleImage = `example-card-${exampleImage}.png`;\n\n\treturn html`\n\t\t<div\n\t\t\tclass=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t[`${rootClass}--${selection}Selection`]:\n\t\t\t\t\ttypeof selection !== \"undefined\",\n\t\t\t\t\"is-selected\": isSelected,\n\t\t\t\t\"is-focused\": isFocused,\n\t\t\t\t\"is-drop-target\": isDropTarget,\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n\t\t\tid=${ifDefined(id)}\n\t\t\t@click=${() => {\n\t\t\t\tupdateArgs({ isSelected: !isSelected });\n\t\t\t}}\n\t\t\ttabindex=\"0\"\n\t\t\trole=\"figure\"\n\t\t>\n\t\t\t<div class=\"${rootClass}-assetContainer\">\n\t\t\t\t<img class=\"${rootClass}-asset\" alt=\"assetcard example image\" src=\"${image ?? exampleImage}\" />\n\t\t\t\t<div class=\"${rootClass}-selectionOverlay\"></div>\n\t\t\t</div>\n\t\t\t${when(\n\t\t\t\ttitle,\n\t\t\t\t() => html`<div class=\"${rootClass}-header\">\n\t\t\t\t\t${when(\n\t\t\t\t\t\ttitle,\n\t\t\t\t\t\t() => html`<div class=\"${rootClass}-title\" id=${camelCase(title)}>${title}</div>`\n\t\t\t\t\t)}\n\t\t\t\t\t${when(\n\t\t\t\t\t\theaderContent,\n\t\t\t\t\t\t() =>\n\t\t\t\t\t\t\thtml`<div class=\"${rootClass}-headerContent\">\n\t\t\t\t\t\t\t\t${headerContent}\n\t\t\t\t\t\t\t</div>`\n\t\t\t\t\t)}\n\t\t\t\t</div>`\n\t\t\t)}\n\t\t\t${when(\n\t\t\t\tcontent,\n\t\t\t\t() => html`<div class=\"${rootClass}-content\">${content}</div>`\n\t\t\t)}\n\t\t\t<div class=\"${rootClass}-selectionIndicator\">\n\t\t\t\t${when(\n\t\t\t\t\tselection === \"checkbox\",\n\t\t\t\t\t() =>\n\t\t\t\t\t\tCheckbox({\n\t\t\t\t\t\t\t...globals,\n\t\t\t\t\t\t\tsize: \"m\",\n\t\t\t\t\t\t\tisEmphasized: true,\n\t\t\t\t\t\t\tisChecked: isSelected,\n\t\t\t\t\t\t\tariaLabelledby: camelCase(title),\n\t\t\t\t\t\t\tcustomClasses: [`${rootClass}-checkbox`],\n\t\t\t\t\t\t}),\n\t\t\t\t\t() => html`<div class=\"${rootClass}-selectionOrder\">1</div>`\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t`;\n};\n",null,"import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { styleMap } from \"lit/directives/style-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { when } from \"lit/directives/when.js\";\n\nimport { useArgs } from \"@storybook/client-api\";\n\nimport { Template as Icon } from \"@spectrum-css/icon/stories/template.js\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-Checkbox\",\n\tsize = \"m\",\n\tlabel,\n\tisChecked = false,\n\tisEmphasized = false,\n\tisIndeterminate = false,\n\tisDisabled = false,\n\tisInvalid = false,\n\tisReadOnly = false,\n\ttitle,\n\tvalue,\n\tid,\n\tariaLabelledby,\n\tcustomStyles = {},\n\tcustomClasses = [],\n\t...globals\n}) => {\n\tconst [_, updateArgs] = useArgs();\n\n\tconst { express } = globals;\n\n\ttry {\n\t\tif (!express) import(/* webpackPrefetch: true */ \"../themes/spectrum.css\");\n\t\telse import(/* webpackPrefetch: true */ \"../themes/express.css\");\n\t} catch (e) {\n\t\tconsole.warn(e);\n\t}\n\n\tlet iconSize = \"75\";\n\tswitch (size) {\n\t\tcase \"s\":\n\t\t\ticonSize = \"50\";\n\t\t\tbreak;\n\t\tcase \"l\":\n\t\t\ticonSize = \"100\";\n\t\t\tbreak;\n\t\tcase \"xl\":\n\t\t\ticonSize = \"200\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\ticonSize = \"75\";\n\t}\n\n\treturn html`\n\t\t<label\n\t\t\tclass=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t[`${rootClass}--size${size?.toUpperCase()}`]:\n\t\t\t\t\ttypeof size !== \"undefined\",\n\t\t\t\t[`${rootClass}--emphasized`]: isEmphasized,\n\t\t\t\t[`is-indeterminate`]: isIndeterminate,\n\t\t\t\t[`is-disabled`]: isDisabled|| isReadOnly,\n\t\t\t\t[`is-invalid`]: isInvalid,\n\t\t\t\t[`is-readOnly`]: isReadOnly,\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n\t\t\tid=${ifDefined(id)}\n\t\t\tstyle=${ifDefined(styleMap(customStyles))}\n\t\t>\n\t\t\t<input\n\t\t\t\ttype=\"checkbox\"\n\t\t\t\tclass=\"${rootClass}-input\"\n\t\t\t\taria-labelledby=${ifDefined(ariaLabelledby)}\n\t\t\t\t?checked=${isChecked}\n\t\t\t\t?disabled=${isDisabled || isReadOnly}\n\t\t\t\ttitle=${ifDefined(title)}\n\t\t\t\tvalue=${ifDefined(value)}\n\t\t\t\t@change=${() => {\n\t\t\t\t\tif (isDisabled) return;\n\t\t\t\t\tupdateArgs({ isChecked: !isChecked });\n\t\t\t\t}}\n\t\t\t\tid=${ifDefined(id ? `${id}-input` : undefined)}\n\t\t\t/>\n\t\t\t<span class=\"${rootClass}-box\">\n\t\t\t\t${Icon({\n\t\t\t\t\t...globals,\n\t\t\t\t\tsize,\n\t\t\t\t\ticonName: `Checkmark${iconSize}`,\n\t\t\t\t\tcustomClasses: [`${rootClass}-checkmark`],\n\t\t\t\t})}\n\t\t\t\t${Icon({\n\t\t\t\t\t...globals,\n\t\t\t\t\tsize,\n\t\t\t\t\ticonName: `Dash${iconSize}`,\n\t\t\t\t\tcustomClasses: [`${rootClass}-partialCheckmark`],\n\t\t\t\t})}\n\t\t\t</span>\n\t\t\t${when(\n\t\t\t\tlabel,\n\t\t\t\t() => html`<span class=\"${rootClass}-label\">${label}</span>`\n\t\t\t)}\n\t\t</label>\n\t`;\n};\n"],"names":[],"sourceRoot":""}