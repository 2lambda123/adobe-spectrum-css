{"version":3,"file":"treeview-stories-treeview-stories.b48477f2.iframe.bundle.js","mappings":";;;AAuIA;AAQA;;AAEA;;AAnHA;AACA;;AAKA;AACA;;AAEA;;AAaA;;AAEA;AACA;;;AAUA;;AAEA;AACA;;AAUA;AAQA;AAQA;AAcA;;AAEA;;AAuCA;;ACnJA;;ACgBA;AAIA;AAIA;AACA;;AAEA;;ACCA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AAIA;;AAGA;AAUA;AACA;;AAEA;;AAQA;;AAGA;AAUA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAMA;;AAEA;AAUA;AAGA;AACA;;AAEA;AACA;;AAMA","sources":["webpack://@spectrum-css/preview/../components/treeview/stories/template.js","webpack://@spectrum-css/preview/","webpack://@spectrum-css/preview/../components/opacitycheckerboard/stories/template.js","webpack://@spectrum-css/preview/../components/thumbnail/stories/template.js"],"sourcesContent":["import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { repeat } from \"lit/directives/repeat.js\";\nimport { styleMap } from \"lit/directives/style-map.js\";\n\nimport { Template as Icon } from \"@spectrum-css/icon/stories/template.js\";\nimport { Template as Thumbnail } from \"@spectrum-css/thumbnail/stories/template.js\";\n\nimport \"../index.css\";\n\nexport const TreeViewItem = ({\n\trootClass = \"spectrum-TreeView\",\n\tsize = \"m\",\n\ttype,\n\tid,\n\tlink,\n\tlabel,\n\tisSelected,\n\tisDisabled,\n\tisOpen,\n\tisDropTarget,\n\ticon,\n\tthumbnail,\n\titems,\n\tcustomClasses = [],\n\t...globals\n}) => {\n\tif (type === \"heading\") {\n\t\treturn html`\n\t\t\t<li\n\t\t\t\tid=${id}\n\t\t\t\tclass=${classMap({\n\t\t\t\t\t[`${rootClass}-section`]: true,\n\t\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t\t})}\n\t\t\t>\n\t\t\t\t<div class=\"${rootClass}-heading\">\n\t\t\t\t\t<span class=\"${rootClass}-itemLabel\">${label}</span>\n\t\t\t\t</div>\n\t\t\t\t${typeof items !== \"undefined\" && items.length > 0\n\t\t\t\t\t? Template({\n\t\t\t\t\t\t\t...globals,\n\t\t\t\t\t\t\titems: items,\n\t\t\t\t\t\t\tsize,\n\t\t\t\t\t\t\trootClass: \"spectrum-TreeView\",\n\t\t\t\t\t\t\tcustomClasses: [\"is-opened\"],\n\t\t\t\t\t})\n\t\t\t\t\t: \"\"}\n\t\t\t</li>\n\t\t`;\n\t}\n\n\treturn html`\n\t\t<li\n\t\t\tid=${id}\n\t\t\tclass=${classMap({\n\t\t\t\t[`${rootClass}-item`]: true,\n\t\t\t\t\"is-selected\": isSelected,\n\t\t\t\t\"is-disabled\": isDisabled,\n\t\t\t\t\"is-open\": isOpen,\n\t\t\t\t\"is-drop-target\": isDropTarget,\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n\t\t>\n\t\t\t<a\n\t\t\t\thref=${link}\n\t\t\t\ttarget=\"_self\"\n\t\t\t\tclass=\"${rootClass}-itemLink\"\n\t\t\t\t@click=${onclick ??\n\t\t\t\tfunction (evt) {\n\t\t\t\t\tif (isDisabled || !evt || !evt.target || typeof items === \"undefined\")\n\t\t\t\t\t\treturn;\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t\tconst closest = evt.target.closest(`.${rootClass}-item`);\n\t\t\t\t\tif (!closest) return;\n\t\t\t\t\tclosest.classList.toggle(\"is-open\");\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t${typeof items !== \"undefined\"\n\t\t\t\t\t? Icon({\n\t\t\t\t\t\t\t...globals,\n\t\t\t\t\t\t\tsize,\n\t\t\t\t\t\t\ticonName: \"ChevronRight\",\n\t\t\t\t\t\t\tcustomClasses: [`${rootClass}-itemIndicator`],\n\t\t\t\t\t  })\n\t\t\t\t\t: \"\"}\n\t\t\t\t${icon\n\t\t\t\t\t? Icon({\n\t\t\t\t\t\t\t...globals,\n\t\t\t\t\t\t\tsize,\n\t\t\t\t\t\t\ticonName: icon,\n\t\t\t\t\t\t\tcustomClasses: [`${rootClass}-itemIcon`],\n\t\t\t\t\t  })\n\t\t\t\t\t: \"\"}\n\t\t\t\t${thumbnail\n\t\t\t\t\t? Thumbnail({\n\t\t\t\t\t\t\t...globals,\n\t\t\t\t\t\t\t...thumbnail,\n\t\t\t\t\t\t\tsize: size == \"s\"  ? \"200\"\n\t\t\t\t\t\t\t\t: size == \"m\"  ? \"200\"\n\t\t\t\t\t\t\t\t: size == \"l\"  ? \"400\"\n\t\t\t\t\t\t\t\t: size == \"xl\" ? \"600\"\n\t\t\t\t\t\t\t\t: \"300\",\n\t\t\t\t\t\t\tisLayer: true,\n\t\t\t\t\t\t\tisSelected,\n\t\t\t\t\t\t\tcustomClasses: [`${rootClass}-itemThumbnail`],\n\t\t\t\t\t  })\n\t\t\t\t\t: \"\"}\n\t\t\t\t<span class=\"${rootClass}-itemLabel\">${label}</span>\n\t\t\t</a>\n\t\t\t${typeof items !== \"undefined\" && items.length > 0\n\t\t\t\t? Template({\n\t\t\t\t\t\t...globals,\n\t\t\t\t\t\titems: items,\n\t\t\t\t\t\tsize,\n\t\t\t\t\t\trootClass: \"spectrum-TreeView\",\n\t\t\t\t\t\tcustomClasses: [\"is-opened\"],\n\t\t\t\t  })\n\t\t\t\t: \"\"}\n\t\t</li>\n\t`;\n};\n\nexport const Template = ({\n\trootClass = \"spectrum-TreeView\",\n\tcustomClasses = [],\n\tcustomStyles = {},\n\tsize = \"m\",\n\tvariant,\n\tisQuiet,\n\titems,\n\t...globals\n}) => {\n\treturn html`\n\t\t<ul\n\t\t\tclass=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t[`${rootClass}--size${size?.toUpperCase()}`]:\n\t\t\t\t\ttypeof size !== \"undefined\",\n\t\t\t\t[`${rootClass}--${variant}`]: typeof variant !== \"undefined\",\n\t\t\t\t[`${rootClass}--quiet`]: isQuiet,\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n\t\t\tstyle=${styleMap(customStyles)}\n\t\t>\n\t\t\t${repeat(\n\t\t\t\titems,\n\t\t\t\t(item) => item.id,\n\t\t\t\t(item) => {\n\t\t\t\t\treturn TreeViewItem({\n\t\t\t\t\t\t...globals,\n\t\t\t\t\t\t...item,\n\t\t\t\t\t\tsize,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t)}\n\t\t</ul>\n\t`;\n};\n",null,"import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { styleMap } from \"lit/directives/style-map.js\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-OpacityCheckerboard\",\n\tbackgroundPosition,\n\tcustomClasses = [],\n\tcustomStyles = {},\n\tid,\n\tcontent = [],\n\trole,\n}) => {\n\treturn html`\n\t\t<div\n\t\t\tclass=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n\t\t\tstyle=${ifDefined(styleMap({\n\t\t\t\t\"--mod-opacity-checkerboard-position\": backgroundPosition,\n\t\t\t\t...customStyles,\n\t\t\t}))}\n\t\t\trole=${ifDefined(role)}\n\t\t\tid=${ifDefined(id)}\n\t\t>\n\t\t\t${content}\n\t\t</div>`;\n};\n","import { Template as OpacityCheckerboard } from \"@spectrum-css/opacitycheckerboard/stories/template.js\";\nimport { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { styleMap } from \"lit/directives/style-map.js\";\nimport { when } from \"lit/directives/when.js\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-Thumbnail\",\n\tsize = \"500\",\n\timageURL,\n\tsvg,\n\taltText,\n\tisCover = false,\n\tisDisabled = false,\n\tisFocused = false,\n\tisLayer = false,\n\tisSelected = false,\n\tbackgroundColor,\n\tonclick,\n\tcustomClasses = [],\n\tcustomStyles = {},\n\tid,\n}) => {\n\n\tconst image = imageURL ? html`<img class=\"${rootClass}-image\" src=${imageURL} alt=${ifDefined(altText)}/>` : svg ? html`${svg}` : \"\";\n\n  const checkerboardContent = html`\n\t\t\t<div class=\"${rootClass}-image-wrapper\">\n\t\t\t${imageURL\n\t\t\t\t? html`<img\n\t\t\t\t\t\tclass=\"${rootClass}-image\"\n\t\t\t\t\t\tsrc=${imageURL}\n\t\t\t\t\t\talt=${altText}\n\t\t\t\t\t/>`\n\t\t\t\t: \"\"}\n\t\t\t${svg ? html`${svg}` : \"\"}\n\t\t</div>\n\t`;\n\t\n  if (isLayer)\n\t\treturn html`\n\t\t\t<div\n\t\t\t\tclass=${classMap({\n\t\t\t\t\t[rootClass]: true,\n\t\t\t\t\t[`${rootClass}--cover`]: isCover,\n\t\t\t\t\t[`${rootClass}-layer`]: isLayer,\n\t\t\t\t\t[`is-selected`]: isSelected,\n\t\t\t\t\t[`is-disabled`]: isDisabled,\n\t\t\t\t\t[`is-focused`]: isFocused,\n\t\t\t\t\t[`${rootClass}--size${size}`]: typeof size !== \"undefined\",\n\t\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t\t})}\n\t\t\t\tid=${ifDefined(id)}\n\t\t\t\t@click=${onclick}\n\t\t\t>\n\t\t\t\t${OpacityCheckerboard({\n\t\t\t\t\tcomponentOnly: true,\n\t\t\t\t\tcustomClasses: [`${rootClass}-layer-inner`],\n\t\t\t\t\tcontent: checkerboardContent,\n\t\t\t\t})}\n\t\t\t</div>\n\t\t`;\n\n\tif (backgroundColor)\n\t\treturn html`\n\t\t\t<div\n\t\t\t\tclass=${classMap({\n\t\t\t\t\t[rootClass]: true,\n\t\t\t\t\t[`${rootClass}--cover`]: isCover,\n\t\t\t\t\t[`${rootClass}-layer`]: isLayer,\n\t\t\t\t\t[`is-selected`]: isSelected,\n\t\t\t\t\t[`is-disabled`]: isDisabled,\n\t\t\t\t\t[`is-focused`]: isFocused,\n\t\t\t\t\t[`${rootClass}--size${size}`]: typeof size !== \"undefined\",\n\t\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t\t})}\n\t\t\t\tid=${ifDefined(id)}\n\t\t\t\t@click=${onclick}\n\t\t\t>\n\t\t\t\t<div class=\"${rootClass}-background\" style=${styleMap({backgroundColor})}></div>\n\t\t\t\t<div class=\"${rootClass}-image-wrapper\">\n\t\t\t\t\t${imageURL\n\t\t\t\t\t\t? html`<img\n\t\t\t\t\t\t\t\tclass=\"${rootClass}-image\"\n\t\t\t\t\t\t\t\tsrc=${imageURL}\n\t\t\t\t\t\t\t\talt=${altText}\n\t\t\t\t\t\t  />`\n\t\t\t\t\t\t: \"\"}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`;\n\n\treturn html`\n\t\t<div\n\t\t\tclass=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t[`${rootClass}--cover`]: isCover,\n\t\t\t\t[`${rootClass}-layer`]: isLayer,\n\t\t\t\t[`is-selected`]: isSelected,\n\t\t\t\t[`is-disabled`]: isDisabled,\n\t\t\t\t[`is-focused`]: isFocused,\n\t\t\t\t[`${rootClass}--size${size}`]: typeof size !== \"undefined\",\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n\t\tstyle=${ifDefined(styleMap({\n\t\t\t...customStyles,\n\t\t}))}\n\t\tid=${ifDefined(id)}\n\t\t@click=${onclick}\n\t>\n\t\t\t${when(backgroundColor, () => html`<div class=\"${rootClass}-background\" style=${ifDefined(styleMap({ backgroundColor }))}></div>`)}\n\t\t\t${OpacityCheckerboard({\n\t\t\t\trootClass: backgroundColor ? `${rootClass}-image-wrapper` : undefined,\n\t\t\t\tcustomClasses: isLayer ? [`${rootClass}-layer-inner`] : !backgroundColor ? [`${rootClass}-image-wrapper`] : [],\n\t\t\t\tcontent: image ? [image] : [],\n\t\t\t})}\n\t\t</div>\n\t`\n};\n"],"names":[],"sourceRoot":""}