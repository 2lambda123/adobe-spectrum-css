{"version":3,"file":"assetlist-stories-assetlist-stories.2494b65e.iframe.bundle.js","mappings":";;;AAoJA;AAIA;AAIA;AAIA;AAIA;;AAUA;;AClFA;AAIA;;AAEA;AAtEA;AAOA;;;AAGA;AASA;AAKA;AAOA;AACA;AASA;AA8BA;;AAYA;;ACrDA;AAWA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;;AAEA;AACA;AAMA;;AAOA;;AAKA","sources":["webpack://@spectrum-css/preview/","webpack://@spectrum-css/preview/../components/assetlist/stories/template.js","webpack://@spectrum-css/preview/../components/checkbox/stories/template.js"],"sourcesContent":[null,"import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { when } from \"lit/directives/when.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\n\nimport { useArgs } from \"@storybook/client-api\";\n\nimport { Template as Checkbox } from \"@spectrum-css/checkbox/stories/template.js\";\nimport { Template as Icon } from \"@spectrum-css/icon/stories/template.js\";\n\nimport \"../index.css\";\n\nexport const AssetListItem = ({\n\trootClass = \"spectrum-AssetList-item\",\n\timage,\n\ticonName,\n\tlabel,\n\tcheckboxId,\n\tariaLabelledby,\n\tisNavigated = false,\n\tisSelectable = false,\n\tisSelected = false,\n\tisBranch = false,\n\tonclick = () => {},\n\t...globals\n}) => {\n\n\treturn html` <li\n\t\tclass=${classMap({\n\t\t\t[rootClass]: true,\n\t\t\t\"is-selectable\": isSelectable,\n\t\t\t\"is-selected\": isSelected,\n\t\t\t\"is-branch\": isBranch,\n\t\t\t\"is-navigated\": isNavigated,\n\t\t})}\n\t\t@click=${onclick}\n\t\ttabindex=\"0\"\n\t>\n\t\t${when(isSelectable, () =>\n\t\tCheckbox({\n\t\t\t...globals,\n\t\t\tsize: \"m\",\n\t\t\tisChecked: isSelected,\n\t\t\tariaLabelledby,\n\t\t\tid: checkboxId,\n\t\t\tcustomClasses: [`${rootClass}Selector`],\n\t\t}))}\n\t\t${when(\n\t\t\timage,\n\t\t\t() =>\n\t\t\t\thtml`<img src=${image ?? exampleImage} class=\"${rootClass}Thumbnail\" alt=\"asset image thumbnail\" />`\n\t\t)}\n\t\t${when(iconName, () =>\n\t\t\tIcon({\n\t\t\t\ticonName,\n\t\t\t\tcustomClasses: [`${rootClass}Thumbnail`],\n\t\t\t\t...globals,\n\t\t\t})\n\t\t)}\n\t\t${when(label, () => html`<span class=\"${rootClass}Label\">${label}</span>`)}\n\t\t${when(!isSelectable && !isBranch, () =>\n\t\t\tCheckbox({\n\t\t\t\t...globals,\n\t\t\t\tsize: \"m\",\n\t\t\t\tisChecked: isSelected,\n\t\t\t\tariaLabelledby,\n\t\t\t\tid: checkboxId,\n\t\t\t\tcustomClasses: [`${rootClass}Selector`],\n\t\t\t}))}\n\t\t${when(isBranch, () =>\n\t\t\tIcon({\n\t\t\t\ticonName: \"ChevronRight100\",\n\t\t\t\tcustomClasses: [`${rootClass}ChildIndicator`],\n\t\t\t\t...globals,\n\t\t\t})\n\t\t)}\n\t</li>`;\n};\n\nexport const Template = ({\n\trootClass = \"spectrum-AssetList\",\n\titems = [],\n\tcustomClasses = [],\n\tid,\n\t...globals\n}) => {\n\tif (!items) return html``;\n\n\tconst [, updateArgs] = useArgs();\n\n\treturn html`\n\t\t<ul\n\t\t\tclass=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n\t\t\tid=${ifDefined(id)}\n\t\t>\n\t\t\t${items.map((item, idx) => {\n\t\t\t\treturn AssetListItem({\n\t\t\t\t\trootClass: `${rootClass}-item`,\n\t\t\t\t\tonclick: () => {\n\t\t\t\t\t\tif (item.isDisabled) return;\n\t\t\t\t\t\titem.isSelected = !item.isSelected;\n\t\t\t\t\t\tupdateArgs({ items });\n\t\t\t\t\t},\n\t\t\t\t\t...item,\n\t\t\t\t\t...globals,\n\t\t\t\t});\n\t\t\t})}\n\t\t</ul>\n\t`;\n};\n","import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { styleMap } from \"lit/directives/style-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { when } from \"lit/directives/when.js\";\n\nimport { useArgs } from \"@storybook/client-api\";\n\nimport { Template as Icon } from \"@spectrum-css/icon/stories/template.js\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-Checkbox\",\n\tsize = \"m\",\n\tlabel,\n\tisChecked = false,\n\tisEmphasized = false,\n\tisIndeterminate = false,\n\tisDisabled = false,\n\tisInvalid = false,\n\tisReadOnly = false,\n\ttitle,\n\tvalue,\n\tid,\n\tariaLabelledby,\n\tcustomStyles = {},\n\tcustomClasses = [],\n\t...globals\n}) => {\n\tconst [_, updateArgs] = useArgs();\n\n\tconst { express } = globals;\n\n\ttry {\n\t\tif (!express) import(/* webpackPrefetch: true */ \"../themes/spectrum.css\");\n\t\telse import(/* webpackPrefetch: true */ \"../themes/express.css\");\n\t} catch (e) {\n\t\tconsole.warn(e);\n\t}\n\n\tlet iconSize = \"75\";\n\tswitch (size) {\n\t\tcase \"s\":\n\t\t\ticonSize = \"50\";\n\t\t\tbreak;\n\t\tcase \"l\":\n\t\t\ticonSize = \"100\";\n\t\t\tbreak;\n\t\tcase \"xl\":\n\t\t\ticonSize = \"200\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\ticonSize = \"75\";\n\t}\n\n\treturn html`\n\t\t<label\n\t\t\tclass=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t[`${rootClass}--size${size?.toUpperCase()}`]:\n\t\t\t\t\ttypeof size !== \"undefined\",\n\t\t\t\t[`${rootClass}--emphasized`]: isEmphasized,\n\t\t\t\t[`is-indeterminate`]: isIndeterminate,\n\t\t\t\t[`is-disabled`]: isDisabled|| isReadOnly,\n\t\t\t\t[`is-invalid`]: isInvalid,\n\t\t\t\t[`is-readOnly`]: isReadOnly,\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n\t\t\tid=${ifDefined(id)}\n\t\t\tstyle=${ifDefined(styleMap(customStyles))}\n\t\t>\n\t\t\t<input\n\t\t\t\ttype=\"checkbox\"\n\t\t\t\tclass=\"${rootClass}-input\"\n\t\t\t\taria-labelledby=${ifDefined(ariaLabelledby)}\n\t\t\t\t?checked=${isChecked}\n\t\t\t\t?disabled=${isDisabled || isReadOnly}\n\t\t\t\ttitle=${ifDefined(title)}\n\t\t\t\tvalue=${ifDefined(value)}\n\t\t\t\t@change=${() => {\n\t\t\t\t\tif (isDisabled) return;\n\t\t\t\t\tupdateArgs({ isChecked: !isChecked });\n\t\t\t\t}}\n\t\t\t\tid=${ifDefined(id ? `${id}-input` : undefined)}\n\t\t\t/>\n\t\t\t<span class=\"${rootClass}-box\">\n\t\t\t\t${Icon({\n\t\t\t\t\t...globals,\n\t\t\t\t\tsize,\n\t\t\t\t\ticonName: `Checkmark${iconSize}`,\n\t\t\t\t\tcustomClasses: [`${rootClass}-checkmark`],\n\t\t\t\t})}\n\t\t\t\t${Icon({\n\t\t\t\t\t...globals,\n\t\t\t\t\tsize,\n\t\t\t\t\ticonName: `Dash${iconSize}`,\n\t\t\t\t\tcustomClasses: [`${rootClass}-partialCheckmark`],\n\t\t\t\t})}\n\t\t\t</span>\n\t\t\t${when(\n\t\t\t\tlabel,\n\t\t\t\t() => html`<span class=\"${rootClass}-label\">${label}</span>`\n\t\t\t)}\n\t\t</label>\n\t`;\n};\n"],"names":[],"sourceRoot":""}