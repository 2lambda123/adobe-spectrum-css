{"version":3,"file":"2394.94045e61.iframe.bundle.js","mappings":";;AAsDA;AASA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;;AAEA;AACA;AAMA;;AAOA;;AAKA;;ACtEA;AAQA;;;AASA;AACA;AASA;;AAKA;;AC6KA;AAQA;AACA;AACA;AACA;AACA;;AAEA;;AAvEA;;;AAGA;;AAQA;;;;AASA;;AAEA;AAnBA;;AAGA;;AAEA;AAiBA;;AAqDA;;AAvNA;AAWA;AACA;AACA;AACA;AACA;AACA;AAUA;AAUA;AAIA;AAKA;;AAGA;AAGA;AAWA;AAaA;AAWA;AAGA;AAEA;AAUA;AAEA;;AAyHA;;AAgBA;ACzQA;;AAEA;;AAOA;;;;;ACQA;AAQA;;;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;;AAGA;AC7BA;;AAEA;AAKA;;AAEA;;;AAGA","sources":["webpack://@spectrum-css/preview/../components/checkbox/stories/template.js","webpack://@spectrum-css/preview/../components/divider/stories/template.js","webpack://@spectrum-css/preview/../components/menu/stories/template.js","webpack://@spectrum-css/preview/../components/modal/stories/template.js","webpack://@spectrum-css/preview/../components/switch/stories/template.js","webpack://@spectrum-css/preview/../components/tray/stories/template.js"],"sourcesContent":["import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { when } from \"lit/directives/when.js\";\n\nimport { useArgs } from \"@storybook/client-api\";\n\nimport { Template as Icon } from \"@spectrum-css/icon/stories/template.js\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-Checkbox\",\n\tsize = \"m\",\n\tlabel,\n\tisChecked = false,\n\tisEmphasized = false,\n\tisIndeterminate = false,\n\tisDisabled = false,\n\ttitle,\n\tvalue,\n\tid,\n\tariaLabelledby,\n\tcustomClasses = [],\n\t...globals\n}) => {\n\tconst [_, updateArgs] = useArgs();\n\n\tconst { express } = globals;\n\n\ttry {\n\t\tif (!express) import(/* webpackPrefetch: true */ \"../themes/spectrum.css\");\n\t\telse import(/* webpackPrefetch: true */ \"../themes/express.css\");\n\t} catch (e) {\n\t\tconsole.warn(e);\n\t}\n\n\tlet iconSize = \"75\";\n\tswitch (size) {\n\t\tcase \"s\":\n\t\t\ticonSize = \"50\";\n\t\t\tbreak;\n\t\tcase \"l\":\n\t\t\ticonSize = \"100\";\n\t\t\tbreak;\n\t\tcase \"xl\":\n\t\t\ticonSize = \"200\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\ticonSize = \"75\";\n\t}\n\n\treturn html`\n\t\t<label\n\t\t\tclass=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t[`${rootClass}--size${size?.toUpperCase()}`]:\n\t\t\t\t\ttypeof size !== \"undefined\",\n\t\t\t\t[`${rootClass}--emphasized`]: isEmphasized,\n\t\t\t\t[`is-indeterminate`]: isIndeterminate,\n\t\t\t\t[`is-disabled`]: isDisabled,\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n\t\t\tid=${ifDefined(id)}\n\t\t>\n\t\t\t<input\n\t\t\t\ttype=\"checkbox\"\n\t\t\t\tclass=\"${rootClass}-input\"\n\t\t\t\taria-labelledby=${ifDefined(ariaLabelledby)}\n\t\t\t\t?checked=${isChecked}\n\t\t\t\t?disabled=${isDisabled}\n\t\t\t\ttitle=${ifDefined(title)}\n\t\t\t\tvalue=${ifDefined(value)}\n\t\t\t\t@change=${() => {\n\t\t\t\t\tif (isDisabled) return;\n\t\t\t\t\tupdateArgs({ isChecked: !isChecked });\n\t\t\t\t}}\n\t\t\t\tid=${ifDefined(id ? `${id}-input` : undefined)}\n\t\t\t/>\n\t\t\t<span class=\"${rootClass}-box\">\n\t\t\t\t${Icon({\n\t\t\t\t\t...globals,\n\t\t\t\t\tsize,\n\t\t\t\t\ticonName: `Checkmark${iconSize}`,\n\t\t\t\t\tcustomClasses: [`${rootClass}-checkmark`],\n\t\t\t\t})}\n\t\t\t\t${Icon({\n\t\t\t\t\t...globals,\n\t\t\t\t\tsize,\n\t\t\t\t\ticonName: `Dash${iconSize}`,\n\t\t\t\t\tcustomClasses: [`${rootClass}-partialCheckmark`],\n\t\t\t\t})}\n\t\t\t</span>\n\t\t\t${when(\n\t\t\t\tlabel,\n\t\t\t\t() => html`<span class=\"${rootClass}-label\">${label}</span>`\n\t\t\t)}\n\t\t</label>\n\t`;\n};\n","import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\n\nimport { upperCase, lowerCase, capitalize } from \"lodash-es\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-Divider\",\n\tsize = \"m\",\n\ttag = \"hr\",\n\tstaticColor,\n\tvertical = false,\n\tcustomClasses = [],\n\t...globals\n}) => {\n\tconst { express } = globals;\n\n\ttry {\n\t\tif (!express) import(/* webpackPrefetch: true */ \"../themes/spectrum.css\");\n\t\telse import(/* webpackPrefetch: true */ \"../themes/express.css\");\n\t} catch (e) {\n\t\tconsole.warn(e);\n\t}\n\n\tif (tag === \"hr\") {\n\t\treturn html`\n    <hr\n      class=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t[`${rootClass}--size${upperCase(size)}`]: typeof size !== \"undefined\",\n\t\t\t\t[`${rootClass}--vertical`]: vertical === true,\n\t\t\t\t[`${rootClass}--static${capitalize(lowerCase(staticColor))}`]:\n\t\t\t\t\ttypeof staticColor !== \"undefined\",\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n      style=${\n\t\t\t\tvertical === true\n\t\t\t\t\t? \"min-height: 20px; height: auto; align-self: stretch\"\n\t\t\t\t\t: \"\"\n\t\t\t}\n      role=\"separator\"\n      >\n    </hr>`;\n\t} else {\n\t\treturn html` <div\n\t\t\tclass=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t[`${rootClass}--size${size?.toUpperCase()}`]:\n\t\t\t\t\ttypeof size !== \"undefined\",\n\t\t\t\t[`${rootClass}--vertical`]: vertical === true,\n\t\t\t\t[`${rootClass}--static${capitalize(lowerCase(staticColor))}`]:\n\t\t\t\t\ttypeof staticColor !== \"undefined\",\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n\t\t\tstyle=${vertical === true\n\t\t\t\t? \"min-height: 20px; height: auto; align-self: stretch\"\n\t\t\t\t: \"\"}\n\t\t\trole=\"separator\"\n\t\t></div>`;\n\t}\n};\n","import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { styleMap } from \"lit/directives/style-map.js\";\n\nimport { Template as Checkbox } from \"@spectrum-css/checkbox/stories/template.js\";\nimport { Template as Divider } from \"@spectrum-css/divider/stories/template.js\";\nimport { Template as Icon } from \"@spectrum-css/icon/stories/template.js\";\nimport { Template as Switch } from \"@spectrum-css/switch/stories/template.js\";\nimport { Template as Tray } from \"@spectrum-css/tray/stories/template.js\";\n\nimport \"../index.css\";\n\nexport const MenuItem = ({\n  rootClass,\n  label,\n  description,\n  iconName,\n  isHighlighted = false,\n  isActive = false,\n  isSelected = false,\n  isDisabled = false,\n  isChecked = false,\n  isFocused = false,\n  isDrillIn = false,\n  isCollapsible = false,\n  isOpen = false,\n  role = \"menuitem\",\n  items = [],\n  size,\n  id,\n  idx = 0,\n  hasActions,\n  selectionMode,\n  value,\n  ...globals\n}) => {\n  return html`\n    <li\n      class=${classMap({\n        [`${rootClass}`]: true,\n        \"is-highlighted\": isHighlighted,\n        \"is-active\": isActive,\n        \"is-focused\": isFocused,\n        \"is-selected\": isSelected,\n        \"is-disabled\": isDisabled,\n        [`${rootClass}--drillIn`]: isDrillIn,\n        [`${rootClass}--collapsible`]: isCollapsible,\n        \"is-open\": isOpen,\n      })}\n      id=${ifDefined(id)}\n      role=${ifDefined(role)}\n      aria-selected=${isSelected ? \"true\" : \"false\"}\n      aria-disabled=${isDisabled ? \"true\" : \"false\"}\n      tabindex=${ifDefined(!isDisabled ? \"0\" : undefined)}>\n      ${isCollapsible\n        ? Icon({\n            ...globals,\n            iconName: \"ChevronRight100\",\n            size,\n            customClasses: [\n              `${rootClass}Icon`,\n              \"spectrum-Menu-chevron\",\n            ],\n          }) : ''}\n      ${iconName\n        ? Icon({\n            ...globals,\n            iconName,\n            size,\n            customClasses: [\n              `${rootClass}Icon`,\n              `${rootClass}Icon--workflowIcon`\n            ]\n          }) : ''}\n      ${isCollapsible\n        ? html`<span class=\"spectrum-Menu-sectionHeading\">${label}</span>`\n        : ''\n      }\n      ${selectionMode != \"multiple\" && !isCollapsible\n        ? html`<span class=${classMap({\n            [`${rootClass}Label`]: true,\n            ['spectrum-Switch-label']: hasActions,\n          })}>\n          ${label}\n        </span>`\n        : ''}\n      ${typeof description != \"undefined\"\n        ? html`<span class=\"${rootClass}Description\">${description}</span>`\n        : ''}\n      ${isDrillIn\n        ? Icon({\n            ...globals,\n            iconName: \"ChevronRight100\",\n            size,\n            customClasses: [\n              `${rootClass}Icon`,\n              \"spectrum-Menu-chevron\",\n            ],\n          })\n        : ''}\n      ${selectionMode == \"multiple\"\n        ? Checkbox({\n          ...globals,\n          size,\n          isEmphasized: true,\n          isChecked: isSelected,\n          label: label,\n          id: `menu-checkbox-${idx}`,\n          customClasses: [\n            `${rootClass}Checkbox`,\n          ],\n        })\n      : ''}\n      ${isChecked && selectionMode == \"single\"\n        ? Icon({\n            ...globals,\n            iconName: \"Checkmark100\",\n            size,\n            customClasses: [\n              `${rootClass}Icon`,\n              \"spectrum-Menu-checkmark\",\n            ],\n          })\n        : ''}\n        ${value\n          ? html`<span class=\"${rootClass}Value\">${value}</span>`\n          : ''}\n        ${hasActions\n          ? html`<div class=\"${rootClass}Actions\">\n          ${Switch({\n              ...globals,\n              size,\n              isChecked: isSelected,\n              label: null,\n              id: `menu-switch-${idx}`,\n              customClasses: [\n                `${rootClass}Switch`,\n              ],\n            })}\n            </div>`\n          : ''}\n      ${isCollapsible && items.length > 0 ? Template({ ...globals, items, isOpen, size }) : ''}\n    </li>\n  `\n};\n\n/**\n * Get the tray submenu back arrow name with scale number (defined in design spec).\n */\nconst backArrowWithScale = (size = \"m\", iconName = \"ArrowLeft\") => {\n  switch (size) {\n    case \"s\":\n      return `${iconName}200`;\n    case \"l\":\n      return `${iconName}400`;\n    case \"xl\":\n      return `${iconName}500`;\n    default:\n      return `${iconName}300`;\n  }\n}\n\nexport const MenuGroup = ({\n  heading,\n  id,\n  idx = 0,\n  items = [],\n  isDisabled = false,\n  isSelectable = false,\n  isTraySubmenu = false,\n  subrole,\n  size,\n  ...globals\n}) => html`\n  <li\n    id=${ifDefined(id)}\n    role=\"presentation\"\n  >\n    ${!isTraySubmenu \n      ? html`<span\n          class=\"spectrum-Menu-sectionHeading\"\n          id=${id ?? `menu-heading-category-${idx}`}\n          aria-hidden=\"true\"\n        >${heading}</span>`\n      : html`<div class=\"spectrum-Menu-back\">\n          <button aria-label=\"Back to previous menu\" class=\"spectrum-Menu-backButton\" type=\"button\" role=\"menuitem\">\n            ${Icon({\n              ...globals,\n              iconName: backArrowWithScale(size),\n              size,\n              customClasses: [`spectrum-Menu-backIcon`] \n            })}\n          </button>\n          <span\n            class=\"spectrum-Menu-backHeading\"\n            id=${id ?? `menu-heading-category-${idx}`}\n            aria-hidden=\"true\"\n          >${heading}</span>\n        </div>`\n    }\n    ${Template({\n      ...globals,\n      role: \"group\",\n      subrole,\n      labelledby: id ?? `menu-heading-category-${idx}`,\n      items,\n      isDisabled,\n      isSelectable,\n      size,\n    })}\n  </li>\n`;\n\nexport const Template = ({\n  rootClass = \"spectrum-Menu\",\n  labelledby,\n  customClasses = [],\n  customStyles = {},\n  size,\n  isDisabled = false,\n  selectionMode = \"none\",\n  isOpen = false,\n  hasActions = false,\n  isTraySubmenu = false,\n  items = [],\n  role = \"menu\",\n  subrole = \"menuitem\",\n  id,\n  ...globals\n}) => {\n  const menuMarkup = html`\n    <ul\n      class=${classMap({\n        [rootClass]: true,\n\t\t\t\t[`${rootClass}--size${size?.toUpperCase()}`]: typeof size !== \"undefined\",\n        \"is-selectable\": selectionMode === \"single\",\n        \"is-selectableMultiple\": selectionMode === \"multiple\",\n        \"is-open\": isOpen,\n        ...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n      })}\n      id=${ifDefined(id)}\n      role=${ifDefined(role)}\n      aria-labelledby=${ifDefined(labelledby)}\n      aria-disabled=${isDisabled ? \"true\" : \"false\"}\n      style=${ifDefined(styleMap(customStyles))}\n    >\n      ${items.map((i, idx) => {\n        if (i.type === \"divider\")\n          return Divider({\n            ...globals,\n            tag: \"li\",\n            size: \"s\",\n            customClasses: [`${rootClass}-divider`],\n          });\n        else if (i.heading || i.isTraySubmenu)\n          return MenuGroup({ \n            ...i,\n            ...globals,\n            subrole,\n            size,\n            selectionMode,\n            isTraySubmenu,\n          });\n        else\n          return MenuItem({\n            ...globals,\n            ...i,\n            idx,\n            rootClass: `${rootClass}-item`,\n            role: subrole,\n            size,\n            selectionMode,\n            hasActions,\n          });\n      })}\n    </ul>\n  `;\n\n  if (isTraySubmenu){\n    return Tray({ content: [menuMarkup] });\n  }\n  return menuMarkup;\n};\n","import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-Modal\",\n\tcustomClasses = [],\n\tisOpen = true,\n\tvariant,\n\tcontent = [],\n\t...globals\n}) => {\n\treturn html`\n\t\t<div class=\"${rootClass}-wrapper\">\n\t\t\t<div\n\t\t\t\tclass=${classMap({\n\t\t\t\t\t[rootClass]: true,\n\t\t\t\t\t[`${rootClass}--${variant}`]: typeof variant !== \"undefined\",\n\t\t\t\t\t\"is-open\": isOpen,\n\t\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t\t})}\n\t\t\t>\n\t\t\t\t${content}\n\t\t\t</div>\n\t\t</div>\n\t`;\n};\n","import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-Switch\",\n\tsize = \"m\",\n\tlabel = \"Switch label\",\n\tisDisabled,\n\tisChecked,\n\tisEmphasized,\n\tcustomClasses = [],\n\tid,\n\t...globals\n}) => {\n\tconst { express } = globals;\n\n\ttry {\n\t\tif (!express) import(/* webpackPrefetch: true */ \"../themes/spectrum.css\");\n\t\telse import(/* webpackPrefetch: true */ \"../themes/express.css\");\n\t} catch (e) {\n\t\tconsole.warn(e);\n\t}\n\n\t// ID attribute value for the input element.\n\tconst inputId = id ? `${id}-input` : 'switch-onoff-0';\n\n\treturn html`\n\t\t<div\n\t\t\tclass=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t[`${rootClass}--disabled`] : isDisabled,\n\t\t\t\t[`${rootClass}--emphasized`] : isEmphasized,\n\t\t\t\t[`${rootClass}--size${size?.toUpperCase()}`]:\n\t\t\t\t\ttypeof size !== \"undefined\",\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n\t\t\tid=${ifDefined(id)}\n\t\t>\n\t\t\t<input\n\t\t\t\ttype=\"checkbox\"\n\t\t\t\tclass=\"${rootClass}-input\"\n\t\t\t\tid=${inputId}\n\t\t\t\t?disabled=${isDisabled}\n\t\t\t\t?checked=${isChecked}\n\t\t\t/>\n\t\t\t<span class=\"${rootClass}-switch\"></span>\n\t\t\t${label\n\t\t\t\t? html`<label class=\"${rootClass}-label\" for=${inputId}\n\t\t\t\t\t\t>${label}</label\n\t\t\t\t  >`\n\t\t\t\t: \"\"}\n\t\t</div>\n\t`;\n};\n","import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\n\nimport { Template as Modal } from \"@spectrum-css/modal/stories/template.js\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-Tray\",\n\tisOpen = true,\n\tcontent = [],\n\tcustomClasses = [\"spectrum-Modal\"],\n\tid,\n\t...globals\n}) => {\n\tconst { express } = globals;\n\n\ttry {\n\t\tif (!express) import(/* webpackPrefetch: true */ \"../themes/spectrum.css\");\n\t\telse import(/* webpackPrefetch: true */ \"../themes/express.css\");\n\t} catch (e) {\n\t\tconsole.warn(e);\n\t}\n\n\treturn html`\n\t\t<div class=\"${rootClass}-wrapper\">\n\t\t\t<div\n\t\t\t\tclass=${classMap({\n\t\t\t\t\t[rootClass]: true,\n\t\t\t\t\t\"is-open\": isOpen,\n\t\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t\t})}\n\t\t\t\tid=${ifDefined(id)}\n\t\t\t>\n\t\t\t${content.map((c) => (typeof c === \"function\" ? c({}) : c))}\n\t\t\t</div>\n\t\t</div>\n\t`;\n};\n"],"names":[],"sourceRoot":""}