{"version":3,"file":"table-stories-table-stories.8317c974.iframe.bundle.js","mappings":";;;AAyCA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAGA;;AAEA;;ACVA;AASA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;;AAEA;AACA;AAMA;;AAOA;;AAKA;;AChFA;AAIA;AAIA;AACA;;AAEA;;ACCA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AAIA;;AAGA;AAUA;AACA;;AAEA;;AAQA;;AAGA;AAUA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAMA;;AAEA;AAUA;AAGA;AACA;;AAEA;AACA;;AAMA;ACkFA;AACA;AAKA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AAOA;AAEA;AACA;AACA;;;;AAIA;AAUA;AACA;AACA;AACA;;;;AAIA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;;AAEA;;AApOA;AAKA;;AAIA;AAKA;AACA;AAYA;AACA;AACA;AACA;;AAEA;AACA;;;;AAIA;AAQA;;AAGA;AAEA;AACA;AACA;;AAMA;AACA;AAUA;;AAMA;AACA;;AAGA;AAEA;AACA;AACA;AAIA;AACA;;AAGA;AACA;AACA;AACA;AAIA;;AAEA;AACA;AACA;AAGA;AAEA;AACA;AAkIA;AACA;AAKA;;AAGA;;;AAOA;;AAIA","sources":["webpack://@spectrum-css/preview/../components/button/stories/template.js","webpack://@spectrum-css/preview/../components/checkbox/stories/template.js","webpack://@spectrum-css/preview/../components/opacitycheckerboard/stories/template.js","webpack://@spectrum-css/preview/../components/thumbnail/stories/template.js","webpack://@spectrum-css/preview/../components/table/stories/template.js"],"sourcesContent":["import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { styleMap } from \"lit/directives/style-map.js\";\nimport { when } from \"lit/directives/when.js\";\n\nimport { capitalize, lowerCase } from \"lodash-es\";\n\nimport { Template as Icon } from \"@spectrum-css/icon/stories/template.js\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n  rootClass = \"spectrum-Button\",\n  id,\n  customClasses = [],\n  customStyles = {},\n  size = \"m\",\n  label,\n  hideLabel = false,\n  iconName,\n  iconAfterLabel = false,\n  variant,\n  staticColor,\n  treatment,\n  onclick,\n  isDisabled = false,\n  ariaExpanded,\n  ariaControls,\n  ...globals\n}) => {\n\tconst { express } = globals;\n\ttry {\n\t\tif (express) import(/* webpackPrefetch: true */ \"../themes/express.css\");\n\t\telse import(/* webpackPrefetch: true */ \"../themes/spectrum.css\");\n\t} catch (e) {\n\t\tconsole.warn(e);\n\t}\n\n  return html`\n    <button\n      class=${classMap({\n        [rootClass]: true,\n        [`${rootClass}--${treatment}`]: typeof treatment !== \"undefined\",\n        [`${rootClass}--${variant}`]: typeof variant !== \"undefined\",\n        [`${rootClass}--size${size?.toUpperCase()}`]: typeof size !== \"undefined\",\n        [`${rootClass}--static${capitalize(lowerCase(staticColor))}`]: typeof staticColor !== \"undefined\",\n        [`${rootClass}--iconOnly`]: hideLabel,\n        ...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n      })}\n      id=${ifDefined(id)}\n      style=${ifDefined(styleMap(customStyles))}\n      ?disabled=${isDisabled}\n      @click=${onclick}\n      aria-label=${ifDefined(hideLabel ? iconName : undefined)}\n      aria-expanded=${ifDefined(ariaExpanded?.toString())}\n      aria-controls=${ifDefined(ariaControls)}\n    >\n      ${when(iconName && !iconAfterLabel, () => Icon({ ...globals, iconName, size }))}\n      ${when(label && !hideLabel,\n        () => html`<span class=${`${rootClass}-label`}>${label}</span>`\n      )}\n      ${when(iconName && iconAfterLabel, () => Icon({ ...globals, iconName, size }))}\n    </button>\n  `;\n};\n","import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { when } from \"lit/directives/when.js\";\n\nimport { useArgs } from \"@storybook/client-api\";\n\nimport { Template as Icon } from \"@spectrum-css/icon/stories/template.js\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-Checkbox\",\n\tsize = \"m\",\n\tlabel,\n\tisChecked = false,\n\tisEmphasized = false,\n\tisIndeterminate = false,\n\tisDisabled = false,\n\ttitle,\n\tvalue,\n\tid,\n\tariaLabelledby,\n\tcustomClasses = [],\n\t...globals\n}) => {\n\tconst [_, updateArgs] = useArgs();\n\n\tconst { express } = globals;\n\n\ttry {\n\t\tif (!express) import(/* webpackPrefetch: true */ \"../themes/spectrum.css\");\n\t\telse import(/* webpackPrefetch: true */ \"../themes/express.css\");\n\t} catch (e) {\n\t\tconsole.warn(e);\n\t}\n\n\tlet iconSize = \"75\";\n\tswitch (size) {\n\t\tcase \"s\":\n\t\t\ticonSize = \"50\";\n\t\t\tbreak;\n\t\tcase \"l\":\n\t\t\ticonSize = \"100\";\n\t\t\tbreak;\n\t\tcase \"xl\":\n\t\t\ticonSize = \"200\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\ticonSize = \"75\";\n\t}\n\n\treturn html`\n\t\t<label\n\t\t\tclass=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t[`${rootClass}--size${size?.toUpperCase()}`]:\n\t\t\t\t\ttypeof size !== \"undefined\",\n\t\t\t\t[`${rootClass}--emphasized`]: isEmphasized,\n\t\t\t\t[`is-indeterminate`]: isIndeterminate,\n\t\t\t\t[`is-disabled`]: isDisabled,\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n\t\t\tid=${ifDefined(id)}\n\t\t>\n\t\t\t<input\n\t\t\t\ttype=\"checkbox\"\n\t\t\t\tclass=\"${rootClass}-input\"\n\t\t\t\taria-labelledby=${ifDefined(ariaLabelledby)}\n\t\t\t\t?checked=${isChecked}\n\t\t\t\t?disabled=${isDisabled}\n\t\t\t\ttitle=${ifDefined(title)}\n\t\t\t\tvalue=${ifDefined(value)}\n\t\t\t\t@change=${() => {\n\t\t\t\t\tif (isDisabled) return;\n\t\t\t\t\tupdateArgs({ isChecked: !isChecked });\n\t\t\t\t}}\n\t\t\t\tid=${ifDefined(id ? `${id}-input` : undefined)}\n\t\t\t/>\n\t\t\t<span class=\"${rootClass}-box\">\n\t\t\t\t${Icon({\n\t\t\t\t\t...globals,\n\t\t\t\t\tsize,\n\t\t\t\t\ticonName: `Checkmark${iconSize}`,\n\t\t\t\t\tcustomClasses: [`${rootClass}-checkmark`],\n\t\t\t\t})}\n\t\t\t\t${Icon({\n\t\t\t\t\t...globals,\n\t\t\t\t\tsize,\n\t\t\t\t\ticonName: `Dash${iconSize}`,\n\t\t\t\t\tcustomClasses: [`${rootClass}-partialCheckmark`],\n\t\t\t\t})}\n\t\t\t</span>\n\t\t\t${when(\n\t\t\t\tlabel,\n\t\t\t\t() => html`<span class=\"${rootClass}-label\">${label}</span>`\n\t\t\t)}\n\t\t</label>\n\t`;\n};\n","import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { styleMap } from \"lit/directives/style-map.js\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-OpacityCheckerboard\",\n\tbackgroundPosition = \"top left\",\n\tcustomClasses = [],\n\tcustomStyles = {},\n\tid,\n\tcontent = [],\n\trole,\n}) => {\n\treturn html`\n\t\t<div\n\t\t\tclass=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n\t\t\tstyle=${ifDefined(styleMap({\n\t\t\t\t\"--mod-opacity-checkerboard-position\": backgroundPosition,\n\t\t\t\t...customStyles,\n\t\t\t}))}\n\t\t\trole=${ifDefined(role)}\n\t\t\tid=${ifDefined(id)}\n\t\t>\n\t\t\t${content}\n\t\t</div>`;\n};\n","import { Template as OpacityCheckerboard } from \"@spectrum-css/opacitycheckerboard/stories/template.js\";\nimport { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { styleMap } from \"lit/directives/style-map.js\";\nimport { when } from \"lit/directives/when.js\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-Thumbnail\",\n\tsize = \"500\",\n\timageURL,\n\tsvg,\n\taltText,\n\tisCover = false,\n\tisDisabled = false,\n\tisFocused = false,\n\tisLayer = false,\n\tisSelected = false,\n\tbackgroundColor,\n\tonclick,\n\tcustomClasses = [],\n\tcustomStyles = {},\n\tid,\n}) => {\n\n\tconst image = imageURL ? html`<img class=\"${rootClass}-image\" src=${imageURL} alt=${ifDefined(altText)}/>` : svg ? html`${svg}` : \"\";\n\n  const checkerboardContent = html`\n\t\t\t<div class=\"${rootClass}-image-wrapper\">\n\t\t\t${imageURL\n\t\t\t\t? html`<img\n\t\t\t\t\t\tclass=\"${rootClass}-image\"\n\t\t\t\t\t\tsrc=${imageURL}\n\t\t\t\t\t\talt=${altText}\n\t\t\t\t\t/>`\n\t\t\t\t: \"\"}\n\t\t\t${svg ? html`${svg}` : \"\"}\n\t\t</div>\n\t`;\n\t\n  if (isLayer)\n\t\treturn html`\n\t\t\t<div\n\t\t\t\tclass=${classMap({\n\t\t\t\t\t[rootClass]: true,\n\t\t\t\t\t[`${rootClass}--cover`]: isCover,\n\t\t\t\t\t[`${rootClass}-layer`]: isLayer,\n\t\t\t\t\t[`is-selected`]: isSelected,\n\t\t\t\t\t[`is-disabled`]: isDisabled,\n\t\t\t\t\t[`is-focused`]: isFocused,\n\t\t\t\t\t[`${rootClass}--size${size}`]: typeof size !== \"undefined\",\n\t\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t\t})}\n\t\t\t\tid=${ifDefined(id)}\n\t\t\t\t@click=${onclick}\n\t\t\t>\n\t\t\t\t${OpacityCheckerboard({\n\t\t\t\t\tcomponentOnly: true,\n\t\t\t\t\tcustomClasses: [`${rootClass}-layer-inner`],\n\t\t\t\t\tcontent: checkerboardContent,\n\t\t\t\t})}\n\t\t\t</div>\n\t\t`;\n\n\tif (backgroundColor)\n\t\treturn html`\n\t\t\t<div\n\t\t\t\tclass=${classMap({\n\t\t\t\t\t[rootClass]: true,\n\t\t\t\t\t[`${rootClass}--cover`]: isCover,\n\t\t\t\t\t[`${rootClass}-layer`]: isLayer,\n\t\t\t\t\t[`is-selected`]: isSelected,\n\t\t\t\t\t[`is-disabled`]: isDisabled,\n\t\t\t\t\t[`is-focused`]: isFocused,\n\t\t\t\t\t[`${rootClass}--size${size}`]: typeof size !== \"undefined\",\n\t\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t\t})}\n\t\t\t\tid=${ifDefined(id)}\n\t\t\t\t@click=${onclick}\n\t\t\t>\n\t\t\t\t<div class=\"${rootClass}-background\" style=${styleMap({backgroundColor})}></div>\n\t\t\t\t<div class=\"${rootClass}-image-wrapper\">\n\t\t\t\t\t${imageURL\n\t\t\t\t\t\t? html`<img\n\t\t\t\t\t\t\t\tclass=\"${rootClass}-image\"\n\t\t\t\t\t\t\t\tsrc=${imageURL}\n\t\t\t\t\t\t\t\talt=${altText}\n\t\t\t\t\t\t  />`\n\t\t\t\t\t\t: \"\"}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`;\n\n\treturn html`\n\t\t<div\n\t\t\tclass=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t[`${rootClass}--cover`]: isCover,\n\t\t\t\t[`${rootClass}-layer`]: isLayer,\n\t\t\t\t[`is-selected`]: isSelected,\n\t\t\t\t[`is-disabled`]: isDisabled,\n\t\t\t\t[`is-focused`]: isFocused,\n\t\t\t\t[`${rootClass}--size${size}`]: typeof size !== \"undefined\",\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n\t\tstyle=${ifDefined(styleMap({\n\t\t\t...customStyles,\n\t\t}))}\n\t\tid=${ifDefined(id)}\n\t\t@click=${onclick}\n\t>\n\t\t\t${when(backgroundColor, () => html`<div class=\"${rootClass}-background\" style=${ifDefined(styleMap({ backgroundColor }))}></div>`)}\n\t\t\t${OpacityCheckerboard({\n\t\t\t\trootClass: backgroundColor ? `${rootClass}-image-wrapper` : undefined,\n\t\t\t\tcustomClasses: isLayer ? [`${rootClass}-layer-inner`] : !backgroundColor ? [`${rootClass}-image-wrapper`] : [],\n\t\t\t\tcontent: image ? [image] : [],\n\t\t\t})}\n\t\t</div>\n\t`\n};\n","import { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { when } from \"lit/directives/when.js\";\nimport { html, literal } from \"lit/static-html.js\";\n\nimport { Template as Button } from \"@spectrum-css/button/stories/template.js\";\nimport { Template as Checkbox } from \"@spectrum-css/checkbox/stories/template.js\";\nimport { Template as Icon } from \"@spectrum-css/icon/stories/template.js\";\nimport { Template as Thumbnail } from \"@spectrum-css/thumbnail/stories/template.js\";\n\nimport \"../index.css\";\n\nexport const TableRowItem = ({\n\trootClass = \"spectrum-Table\",\n\tcellContent = \"Row Item Text\",\n\tshowCheckbox = false,\n\tisSelected = false,\n\tisSummaryRow = false,\n\tisSectionHeader = false,\n\ttableIsEmphasized = true,\n\tisCollapsible = false,\n\tisExpanded = false,\n\tisHidden = false,\n\ttier,\n\tisLastTier = false,\n\tuseDivs = false,\n\tshowThumbnails = false,\n\tisDropTarget = false,\n\tariaControls,\n\tcustomClasses = [],\n\tsize = \"m\",\n\tid,\n}) => {\n\tconst useThumbnail = showThumbnails && !isSummaryRow && !isSectionHeader;\n\n\t// Use Table tags or Div tags.\n\t// Note: Lit must use the 'literal' function for dynamic tags to work.\n\tconst rowTag = useDivs ? literal`div` : literal`tr`;\n\tconst cellTag = useDivs ? literal`div` : literal`td`;\n\n\t// Content for a table cell.\n\tconst getCellContent = (columnIndex) => {\n\t\tconst content = Array.isArray(cellContent)\n\t\t\t? cellContent[columnIndex]\n\t\t\t: cellContent;\n\t\tif (useThumbnail && columnIndex < 2) {\n\t\t\treturn html`\n\t\t\t\t<div class=\"spectrum-Table-thumbnailInner\">\n\t\t\t\t\t${Thumbnail({\n\t\t\t\t\t\tsize: \"300\",\n\t\t\t\t\t\timageURL: \"example-card-landscape.png\",\n\t\t\t\t\t\tisCover: true,\n\t\t\t\t\t})}\n\t\t\t\t\t<div class=\"spectrum-Table-thumbnailContent\">${content}</div>\n\t\t\t\t</div>\n\t\t\t`;\n\t\t} else {\n\t\t\treturn content;\n\t\t}\n\t};\n\n\treturn html`\n\t<${rowTag}\n\t\tclass=${classMap({\n\t\t\t[`${rootClass}-row`]: true,\n\t\t\t[`${rootClass}-row--summary`]: isSummaryRow,\n\t\t\t[`${rootClass}-row--sectionHeader`]: isSectionHeader,\n\t\t\t[`${rootClass}-row--collapsible`]: isCollapsible,\n\t\t\t[`${rootClass}-row--thumbnail`]: useThumbnail,\n\t\t\t[\"is-selected\"]: isSelected,\n\t\t\t[\"is-expanded\"]: isExpanded,\n\t\t\t[\"is-last-tier\"]: isLastTier,\n\t\t\t[\"is-drop-target\"]: isDropTarget,\n\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t})}\n\t\trole=${ifDefined(useDivs ? \"row\" : undefined)}\n\t\taria-selected=${ifDefined(showCheckbox ? \"true\" : undefined)}\n\t\tdata-tier=${ifDefined(tier)}\n\t\t?hidden=${isHidden}\n\t>\n\t\t${when(showCheckbox && !isSectionHeader, () => html`\n\t\t\t<${cellTag}\n\t\t\t\trole=\"gridcell\"\n\t\t\t\tclass=\"spectrum-Table-cell spectrum-Table-checkboxCell\"\n\t\t\t>\n\t\t\t\t${when(!isSummaryRow, () =>\n\t\t\t\t\tCheckbox({\n\t\t\t\t\t\tsize,\n\t\t\t\t\t\tisEmphasized: tableIsEmphasized,\n\t\t\t\t\t\tisChecked: isSelected,\n\t\t\t\t\t\tcustomClasses: [`${rootClass}-checkbox`],\n\t\t\t\t\t})\n\t\t\t\t)}\n\t\t\t</${cellTag}>`\n\t\t)}\n\n\t\t${isCollapsible\n\t\t\t\t? html`\n\t\t\t\t\t<${cellTag}\n\t\t\t\t\t\trole=${ifDefined(showCheckbox ? \"gridcell\" : useDivs ? \"cell\" : undefined)}\n\t\t\t\t\t\tclass=${classMap({\n\t\t\t\t\t\t\t[`${rootClass}-cell`]: true,\n\t\t\t\t\t\t\t[`${rootClass}-cell--collapsible`]: true,\n\t\t\t\t\t\t\t[`${rootClass}-cell--thumbnail`]: useThumbnail,\n\t\t\t\t\t\t})}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div class=\"${rootClass}-collapseInner\">\n\t\t\t\t\t\t\t${when(!isLastTier, () =>\n\t\t\t\t\t\t\t\tButton({\n\t\t\t\t\t\t\t\t\tsize,\n\t\t\t\t\t\t\t\t\ticonName: \"ChevronRight100\",\n\t\t\t\t\t\t\t\t\thideLabel: true,\n\t\t\t\t\t\t\t\t\tcustomClasses: [`${rootClass}-disclosureIcon`],\n\t\t\t\t\t\t\t\t\tariaExpanded: isExpanded,\n\t\t\t\t\t\t\t\t\tariaControls,\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t${\n\t\t\t\t\t\t\t\tuseThumbnail\n\t\t\t\t\t\t\t\t\t? getCellContent(0)\n\t\t\t\t\t\t\t\t\t: // prettier-ignore\n\t\t\t\t\t\t\t\t\t  html`\n\t\t\t\t\t\t\t\t\t  \t<div\n\t\t\t\t\t\t\t\t\t\t\tclass=\"${rootClass}-collapseContent\"\n\t\t\t\t\t\t\t\t\t\t>${getCellContent(0)}</div>`\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</${cellTag}>`\n\t\t\t\t: html`\n\t\t\t\t\t<${cellTag}\n\t\t\t\t\t\trole=${ifDefined(showCheckbox ? \"gridcell\" : useDivs ? \"cell\" : undefined)}\n\t\t\t\t\t\tclass=${classMap({\n\t\t\t\t\t\t\t[`${rootClass}-cell`]: true,\n\t\t\t\t\t\t\t[`${rootClass}-cell--thumbnail`]: useThumbnail,\n\t\t\t\t\t\t})}\n\t\t\t\t\t\tcolspan=${ifDefined(isSectionHeader && showCheckbox ? \"4\" : isSectionHeader ? \"3\" : undefined)}\n\t\t\t\t\t>${getCellContent(0)}</${cellTag}>`\n\t\t}\n\n\t\t${when(!isSectionHeader, () => html`\n\t\t\t<${cellTag}\n\t\t\t\trole=${ifDefined(showCheckbox ? \"gridcell\" : useDivs ? \"cell\" : undefined)}\n\t\t\t\tclass=${classMap({\n\t\t\t\t\t[`${rootClass}-cell`]: true,\n\t\t\t\t\t[`${rootClass}-cell--thumbnail`]: useThumbnail,\n\t\t\t\t})}\n\t\t\t>${getCellContent(1)}</${cellTag}>\n\n\t\t\t<${cellTag}\n\t\t\t\trole=${ifDefined(showCheckbox ? \"gridcell\" : useDivs ? \"cell\" : undefined)}\n\t\t\t\tclass=${classMap({\n\t\t\t\t\t[`${rootClass}-cell`]: true,\n\t\t\t\t})}\n\t\t\t>${getCellContent(2)}</${cellTag}>`\n\t\t)}\n\t</${rowTag}>\n  `;\n};\n\nexport const Template = ({\n\trootClass = \"spectrum-Table\",\n\tsize = \"m\",\n\tdensity = \"standard\",\n\tisQuiet = false,\n\tisEmphasized = true,\n\tuseDivs = false,\n\tuseScroller = false,\n\tshowThumbnails = false,\n\tisDropTarget = false,\n\trowItems = [],\n\tcustomClasses = [],\n\tid,\n\t...globals\n}) => {\n\tif (!rowItems || !rowItems.length) return html``;\n\n\tconst { express } = globals;\n\ttry {\n\t\tif (!express) import(/* webpackPrefetch: true */ \"../themes/spectrum.css\");\n\t\telse import(/* webpackPrefetch: true */ \"../themes/express.css\");\n\t} catch (e) {\n\t\tconsole.warn(e);\n\t}\n\n\t// Use Table tags or Div tags.\n\tconst tableTag = useDivs ? literal`div` : literal`table`;\n\tconst theadTag = useDivs ? literal`div` : literal`thead`;\n\tconst tbodyTag = useDivs ? literal`div` : literal`tbody`;\n\tconst rowTag = useDivs ? literal`div` : literal`tr`;\n\tconst thTag = useDivs ? literal`div` : literal`th`;\n\n\tconst rootClassMapVariants = {\n\t\t[`${rootClass}--size${size?.toUpperCase()}`]: typeof size !== \"undefined\",\n\t\t[`${rootClass}--${density}`]: density !== \"standard\",\n\t\t[`${rootClass}--quiet`]: isQuiet,\n\t\t[`${rootClass}--emphasized`]: isEmphasized,\n\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t};\n\n\tconst useCheckboxCell = rowItems.some((item) => item.showCheckbox === true);\n\n\tconst tableHtml = html`\n\t<${tableTag}\n\t\tclass=${classMap({\n\t\t\t[rootClass]: !useScroller,\n\t\t\t[`${rootClass}-main`]: useScroller,\n\t\t\t...rootClassMapVariants\n\t\t})}\n\t\tid=${ifDefined(id)}\n\t\trole=${ifDefined(useCheckboxCell ? \"grid\" : useDivs ? \"table\" : undefined)}\n\t\taria-multiselectable=${ifDefined(useCheckboxCell ? \"true\" : undefined)}\n\t\tstyle=\"max-width: 800px;\"\n\t>\n\t\t<${theadTag}\n\t\t\tclass=\"${rootClass}-head\"\n\t\t\trole=${ifDefined(useDivs ? \"rowgroup\" : undefined)}\n\t\t>\n\t\t\t<${rowTag}\n\t\t\t\trole=${ifDefined(useDivs ? \"row\" : undefined)}\n\t\t\t>\n\t\t\t\t${when(useCheckboxCell, () => html`\n\t\t\t\t\t<${thTag}\n\t\t\t\t\t\tclass=\"spectrum-Table-headCell spectrum-Table-checkboxCell\"\n\t\t\t\t\t\trole=${ifDefined(useDivs ? \"columnheader\" : undefined)}\n\t\t\t\t\t>\n\t\t\t\t\t\t${Checkbox({\n\t\t\t\t\t\t\tsize,\n\t\t\t\t\t\t\tisEmphasized: isEmphasized,\n\t\t\t\t\t\t\tisChecked: false,\n\t\t\t\t\t\t\tisIndeterminate: true,\n\t\t\t\t\t\t\tcustomClasses: [`${rootClass}-checkbox`],\n\t\t\t\t\t\t})}\n\t\t\t\t\t</${thTag}>`\n\t\t\t\t)}\n\t\t\t\t<${thTag}\n\t\t\t\t\tclass=\"${rootClass}-headCell is-sortable is-sorted-desc\"\n\t\t\t\t\trole=${ifDefined(useDivs ? \"columnheader\" : undefined)}\n\t\t\t\t\taria-sort=\"descending\"\n\t\t\t\t\ttabindex=\"0\"\n\t\t\t\t>\n\t\t\t\t\t${Icon({\n\t\t\t\t\t\ticonName: \"ArrowDown100\",\n\t\t\t\t\t\tsize,\n\t\t\t\t\t\tcustomClasses: [`${rootClass}-sortedIcon`],\n\t\t\t\t\t})}<span class=\"${rootClass}-columnTitle\">Column title</span>${\n\t\t\t\t\tIcon({\n\t\t\t\t\t\ticonName: \"ChevronDown100\",\n\t\t\t\t\t\tsize,\n\t\t\t\t\t\tcustomClasses: [`${rootClass}-menuIcon`],\n\t\t\t\t\t})}\n\t\t\t\t</${thTag}>\n\t\t\t\t<${thTag}\n\t\t\t\t\tclass=\"${rootClass}-headCell is-sortable\"\n\t\t\t\t\trole=${ifDefined(useDivs ? \"columnheader\" : undefined)}\n\t\t\t\t\taria-sort=\"none\"\n\t\t\t\t\ttabindex=\"0\"\n\t\t\t\t>\n\t\t\t\t\t${Icon({\n\t\t\t\t\t\ticonName: \"ArrowDown100\",\n\t\t\t\t\t\tsize,\n\t\t\t\t\t\tcustomClasses: [`${rootClass}-sortedIcon`],\n\t\t\t\t\t})}<span class=\"${rootClass}-columnTitle\">Column title</span>\n\t\t\t\t</${thTag}>\n\t\t\t\t<${thTag}\n\t\t\t\t\tclass=\"${rootClass}-headCell\"\n\t\t\t\t\trole=${ifDefined(useDivs ? \"columnheader\" : undefined)}\n\t\t\t\t>Column title</${thTag}>\n\t\t\t</${rowTag}>\n\t\t</${theadTag}>\n\t\t<${tbodyTag}\n\t\t\tclass=${classMap({\n\t\t\t\t[`${rootClass}-body`]: true,\n\t\t\t\t[\"is-drop-target\"]: isDropTarget,\n\t\t\t})}\n\t\t\trole=${ifDefined(useDivs ? \"rowgroup\" : undefined)}\n\t\t>\n\t\t\t${rowItems.map((item) =>\n\t\t\t\tTableRowItem({\n\t\t\t\t\trootClass,\n\t\t\t\t\tsize,\n\t\t\t\t\tuseDivs,\n\t\t\t\t\tshowThumbnails,\n\t\t\t\t\ttableIsEmphasized: isEmphasized,\n\t\t\t\t\t...item,\n\t\t\t\t})\n\t\t\t)}\n\t\t</${tbodyTag}>\n\t</${tableTag}>\n\t`;\n\n\t// Scrollable table moves the root class and variant classes into the wrapper\n\t// with the scroller class.\n\tif (useScroller) {\n\t\treturn html`\n\t\t\t<div\n\t\t\t\tclass=${classMap({\n\t\t\t\t\t[rootClass]: true,\n\t\t\t\t\t[`${rootClass}-scroller`]: true,\n\t\t\t\t\t...rootClassMapVariants,\n\t\t\t\t})}\n\t\t\t\tstyle=\"height: 200px;\"\n\t\t\t>\n\t\t\t\t${tableHtml}\n\t\t\t</div>\n\t\t`;\n\t} else {\n\t\treturn tableHtml;\n\t}\n};\n"],"names":[],"sourceRoot":""}