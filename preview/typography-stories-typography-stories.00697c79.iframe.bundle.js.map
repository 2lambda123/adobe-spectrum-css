{"version":3,"file":"typography-stories-typography-stories.00697c79.iframe.bundle.js","mappings":";;AA0CA;AAIA;;AAEA;AAMA;AAgBA;AAIA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAKA;AAEA;AAGA;AAEA;AAGA;AAEA;AAGA;AACA;AACA","sources":["webpack://@spectrum-css/preview/../components/typography/stories/template.js"],"sourcesContent":["import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\n\nimport { capitalize } from \"lodash-es\";\n\nimport \"../index.css\";\n\n// More on component templates: https://storybook.js.org/docs/web-components/writing-stories/introduction#using-args\nexport const Template = ({\n\trootClass = \"spectrum-Typography\",\n\tsemantics,\n\tsize,\n\tvariant,\n\tweight,\n\tglyph = \"sans-serif\",\n\tid,\n\tcontent = [],\n\tcustomClasses = [],\n\t// ...globals\n}) => {\n\tif (Array.isArray(content)) {\n\t\tcontent = content.map((c) => {\n\t\t\tif (typeof c === \"string\") return c;\n\t\t\tif (typeof c === \"object\" && c._$litType$) return c;\n\n\t\t\treturn Template({\n\t\t\t\trootClass,\n\t\t\t\tsemantics,\n\t\t\t\tsize,\n\t\t\t\tvariant,\n\t\t\t\tweight,\n\t\t\t\tglyph,\n\t\t\t\tid,\n\t\t\t\tcustomClasses,\n\t\t\t\t...c,\n\t\t\t});\n\t\t});\n\t}\n\n\tif (typeof semantics === \"undefined\") {\n\t\treturn html`<div\n\t\t\tclass=${classMap({\n\t\t\t\t\"spectrum-Typography\": true,\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n\t\t\tid=${ifDefined(id)}\n\t\t>\n\t\t\t${content}\n\t\t</div>`;\n\t}\n\n\trootClass = `spectrum-${capitalize(semantics)}`;\n\n\tconst classes = {\n\t\t[rootClass]: true,\n\t\t[`${rootClass}--${glyph}`]:\n\t\t\ttypeof semantics !== \"undefined\" &&\n\t\t\ttypeof glyph !== \"undefined\" &&\n\t\t\tglyph !== \"sans-serif\",\n\t\t[`${rootClass}--size${size?.toUpperCase()}`]:\n\t\t\ttypeof semantics !== \"undefined\" && typeof size !== \"undefined\",\n\t\t[`${rootClass}--${weight}`]:\n\t\t\ttypeof semantics !== \"undefined\" && typeof weight !== \"undefined\",\n\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t};\n\n\tif (variant && Array.isArray(variant)) {\n\t\tif ([\"strong\", \"emphasized\"].every((i) => variant.includes(i))) {\n\t\t\tcontent = html`<span\n\t\t\t\tclass=${classMap({\n\t\t\t\t\t[`${rootClass}-strong`]: true,\n\t\t\t\t\t[`${rootClass}-emphasized`]: true,\n\t\t\t\t})}\n\t\t\t\t>${content}</span\n\t\t\t>`;\n\t\t} else if (variant.includes(\"strong\")) {\n\t\t\tcontent = html`<strong\n\t\t\t\tclass=${classMap({ [`${rootClass}-strong`]: true })}\n\t\t\t\t>${content}</strong\n\t\t\t>`;\n\t\t} else if (variant.includes(\"emphasized\")) {\n\t\t\tcontent = html`<em\n\t\t\t\tclass=${classMap({ [`${rootClass}-emphasized`]: true })}\n\t\t\t\t>${content}</em\n\t\t\t>`;\n\t\t}\n\t}\n\n\tif (semantics === \"heading\")\n\t\treturn html`\n\t\t\t<h2 class=${classMap(classes)} id=${ifDefined(id)}>${content}</h2>\n\t\t`;\n\n\tif (semantics === \"body\")\n\t\treturn html`\n\t\t\t<p class=${classMap(classes)} id=${ifDefined(id)}>${content}</p>\n\t\t`;\n\n\tif (semantics === \"code\")\n\t\treturn html`\n\t\t\t<code class=${classMap(classes)} id=${ifDefined(id)}>${content}</code>\n\t\t`;\n\n\treturn html`\n\t\t<span class=${classMap(classes)} id=${ifDefined(id)}>${content}</span>\n\t`;\n};\n"],"names":[],"sourceRoot":""}