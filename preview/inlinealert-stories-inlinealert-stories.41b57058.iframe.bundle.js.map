{"version":3,"file":"inlinealert-stories-inlinealert-stories.41b57058.iframe.bundle.js","mappings":";;;AAyCA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAGA;;AAEA;ACjBA;AAKA;;AAMA;;AASA;;AAKA;;AAMA;AACA;AACA;;AAEA;AACA;;AAEA","sources":["webpack://@spectrum-css/preview/../components/button/stories/template.js","webpack://@spectrum-css/preview/../components/inlinealert/stories/template.js"],"sourcesContent":["import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { styleMap } from \"lit/directives/style-map.js\";\nimport { when } from \"lit/directives/when.js\";\n\nimport { capitalize, lowerCase } from \"lodash-es\";\n\nimport { Template as Icon } from \"@spectrum-css/icon/stories/template.js\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n  rootClass = \"spectrum-Button\",\n  id,\n  customClasses = [],\n  customStyles = {},\n  size = \"m\",\n  label,\n  hideLabel = false,\n  iconName,\n  iconAfterLabel = false,\n  variant,\n  staticColor,\n  treatment,\n  onclick,\n  isDisabled = false,\n  ariaExpanded,\n  ariaControls,\n  ...globals\n}) => {\n\tconst { express } = globals;\n\ttry {\n\t\tif (express) import(/* webpackPrefetch: true */ \"../themes/express.css\");\n\t\telse import(/* webpackPrefetch: true */ \"../themes/spectrum.css\");\n\t} catch (e) {\n\t\tconsole.warn(e);\n\t}\n\n  return html`\n    <button\n      class=${classMap({\n        [rootClass]: true,\n        [`${rootClass}--${treatment}`]: typeof treatment !== \"undefined\",\n        [`${rootClass}--${variant}`]: typeof variant !== \"undefined\",\n        [`${rootClass}--size${size?.toUpperCase()}`]: typeof size !== \"undefined\",\n        [`${rootClass}--static${capitalize(lowerCase(staticColor))}`]: typeof staticColor !== \"undefined\",\n        [`${rootClass}--iconOnly`]: hideLabel,\n        ...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n      })}\n      id=${ifDefined(id)}\n      style=${ifDefined(styleMap(customStyles))}\n      ?disabled=${isDisabled}\n      @click=${onclick}\n      aria-label=${ifDefined(hideLabel ? iconName : undefined)}\n      aria-expanded=${ifDefined(ariaExpanded?.toString())}\n      aria-controls=${ifDefined(ariaControls)}\n    >\n      ${when(iconName && !iconAfterLabel, () => Icon({ ...globals, iconName, size }))}\n      ${when(label && !hideLabel,\n        () => html`<span class=${`${rootClass}-label`}>${label}</span>`\n      )}\n      ${when(iconName && iconAfterLabel, () => Icon({ ...globals, iconName, size }))}\n    </button>\n  `;\n};\n","import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\n// import { ifDefined } from 'lit/directives/if-definedjs';\n\nimport { Template as Icon } from \"@spectrum-css/icon/stories/template.js\";\nimport { Template as Button } from \"@spectrum-css/button/stories/template.js\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-InLineAlert\",\n\tcustomClasses = [],\n\theaderText,\n\ttext,\n\tvariant = \"neutral\",\n\tisClosable = false,\n\t...globals\n}) => {\n\tconst { express } = globals;\n\n\ttry {\n\t\tif (!express) import(/* webpackPrefetch: true */ \"../themes/spectrum.css\");\n\t\telse import(/* webpackPrefetch: true */ \"../themes/express.css\");\n\t} catch (e) {\n\t\tconsole.warn(e);\n\t}\n\n\tlet iconName;\n\tswitch (variant) {\n\t\tcase \"info\":\n\t\t\ticonName = \"Info\";\n\t\t\tbreak;\n\t\tcase \"positive\":\n\t\t\ticonName = \"CheckmarkCircle\";\n\t\t\tbreak;\n\t\tcase \"notice\":\n\t\tcase \"negative\":\n\t\tcase \"closable\":\n\t\t\ticonName = \"Alert\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\ticonName = undefined;\n\t}\n\n\tconst iconMarkup =\n\t\ttypeof iconName !== \"undefined\"\n\t\t\t? html`\n\t\t\t\t\t${Icon({\n\t\t\t\t\t\t...globals,\n\t\t\t\t\t\ticonName,\n\t\t\t\t\t\tcustomClasses: [`${rootClass}-icon`],\n\t\t\t\t\t})}\n\t\t\t  `\n\t\t\t: \"\";\n\n\tconst closableMarkup = isClosable\n\t\t? html`\n\t\t\t\t<div class=\"spectrum-InLineAlert-footer\">\n\t\t\t\t\t${Button({\n\t\t\t\t\t\t...globals,\n\t\t\t\t\t\ttreatment: \"outline\",\n\t\t\t\t\t\tvariant: \"primary\",\n\t\t\t\t\t\ticonName: false,\n\t\t\t\t\t\thideLabel: false,\n\t\t\t\t\t\tlabel: \"Ok\",\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t  `\n\t\t: \"\";\n\n\treturn html`\n\t\t<div\n\t\t\tclass=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t[`${rootClass}--${variant}`]: typeof variant !== \"undefined\",\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n\t\t>\n\t\t\t<div class=\"${rootClass}-header\">\n\t\t\t\t${variant.charAt(0).toUpperCase() + variant.slice(1)} ${headerText}\n\t\t\t\t${iconMarkup}\n\t\t\t</div>\n\t\t\t<div class=\"${rootClass}-content\">${text}</div>\n\t\t\t${closableMarkup}\n\t\t</div>\n\t`;\n};\n"],"names":[],"sourceRoot":""}