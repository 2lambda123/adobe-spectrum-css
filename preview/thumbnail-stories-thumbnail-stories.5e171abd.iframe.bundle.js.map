{"version":3,"file":"thumbnail-stories-thumbnail-stories.5e171abd.iframe.bundle.js","mappings":";;;AAkBA;AAIA;AAIA;AACA;;AAEA;;ACCA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AAIA;;AAGA;AAUA;AACA;;AAEA;;AAQA;;AAGA;AAUA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAMA;;AAEA;AAUA;AAGA;AACA;;AAEA;AACA;;AAMA","sources":["webpack://@spectrum-css/preview/../components/opacitycheckerboard/stories/template.js","webpack://@spectrum-css/preview/../components/thumbnail/stories/template.js"],"sourcesContent":["import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { styleMap } from \"lit/directives/style-map.js\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-OpacityCheckerboard\",\n\tbackgroundPosition = \"top left\",\n\tcustomClasses = [],\n\tcustomStyles = {},\n\tid,\n\tcontent = [],\n\trole,\n}) => {\n\treturn html`\n\t\t<div\n\t\t\tclass=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n\t\t\tstyle=${ifDefined(styleMap({\n\t\t\t\t\"--mod-opacity-checkerboard-position\": backgroundPosition,\n\t\t\t\t...customStyles,\n\t\t\t}))}\n\t\t\trole=${ifDefined(role)}\n\t\t\tid=${ifDefined(id)}\n\t\t>\n\t\t\t${content}\n\t\t</div>`;\n};\n","import { Template as OpacityCheckerboard } from \"@spectrum-css/opacitycheckerboard/stories/template.js\";\nimport { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\nimport { styleMap } from \"lit/directives/style-map.js\";\nimport { when } from \"lit/directives/when.js\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-Thumbnail\",\n\tsize = \"500\",\n\timageURL,\n\tsvg,\n\taltText,\n\tisCover = false,\n\tisDisabled = false,\n\tisFocused = false,\n\tisLayer = false,\n\tisSelected = false,\n\tbackgroundColor,\n\tonclick,\n\tcustomClasses = [],\n\tcustomStyles = {},\n\tid,\n}) => {\n\n\tconst image = imageURL ? html`<img class=\"${rootClass}-image\" src=${imageURL} alt=${ifDefined(altText)}/>` : svg ? html`${svg}` : \"\";\n\n  const checkerboardContent = html`\n\t\t\t<div class=\"${rootClass}-image-wrapper\">\n\t\t\t${imageURL\n\t\t\t\t? html`<img\n\t\t\t\t\t\tclass=\"${rootClass}-image\"\n\t\t\t\t\t\tsrc=${imageURL}\n\t\t\t\t\t\talt=${altText}\n\t\t\t\t\t/>`\n\t\t\t\t: \"\"}\n\t\t\t${svg ? html`${svg}` : \"\"}\n\t\t</div>\n\t`;\n\t\n  if (isLayer)\n\t\treturn html`\n\t\t\t<div\n\t\t\t\tclass=${classMap({\n\t\t\t\t\t[rootClass]: true,\n\t\t\t\t\t[`${rootClass}--cover`]: isCover,\n\t\t\t\t\t[`${rootClass}-layer`]: isLayer,\n\t\t\t\t\t[`is-selected`]: isSelected,\n\t\t\t\t\t[`is-disabled`]: isDisabled,\n\t\t\t\t\t[`is-focused`]: isFocused,\n\t\t\t\t\t[`${rootClass}--size${size}`]: typeof size !== \"undefined\",\n\t\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t\t})}\n\t\t\t\tid=${ifDefined(id)}\n\t\t\t\t@click=${onclick}\n\t\t\t>\n\t\t\t\t${OpacityCheckerboard({\n\t\t\t\t\tcomponentOnly: true,\n\t\t\t\t\tcustomClasses: [`${rootClass}-layer-inner`],\n\t\t\t\t\tcontent: checkerboardContent,\n\t\t\t\t})}\n\t\t\t</div>\n\t\t`;\n\n\tif (backgroundColor)\n\t\treturn html`\n\t\t\t<div\n\t\t\t\tclass=${classMap({\n\t\t\t\t\t[rootClass]: true,\n\t\t\t\t\t[`${rootClass}--cover`]: isCover,\n\t\t\t\t\t[`${rootClass}-layer`]: isLayer,\n\t\t\t\t\t[`is-selected`]: isSelected,\n\t\t\t\t\t[`is-disabled`]: isDisabled,\n\t\t\t\t\t[`is-focused`]: isFocused,\n\t\t\t\t\t[`${rootClass}--size${size}`]: typeof size !== \"undefined\",\n\t\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t\t})}\n\t\t\t\tid=${ifDefined(id)}\n\t\t\t\t@click=${onclick}\n\t\t\t>\n\t\t\t\t<div class=\"${rootClass}-background\" style=${styleMap({backgroundColor})}></div>\n\t\t\t\t<div class=\"${rootClass}-image-wrapper\">\n\t\t\t\t\t${imageURL\n\t\t\t\t\t\t? html`<img\n\t\t\t\t\t\t\t\tclass=\"${rootClass}-image\"\n\t\t\t\t\t\t\t\tsrc=${imageURL}\n\t\t\t\t\t\t\t\talt=${altText}\n\t\t\t\t\t\t  />`\n\t\t\t\t\t\t: \"\"}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`;\n\n\treturn html`\n\t\t<div\n\t\t\tclass=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t[`${rootClass}--cover`]: isCover,\n\t\t\t\t[`${rootClass}-layer`]: isLayer,\n\t\t\t\t[`is-selected`]: isSelected,\n\t\t\t\t[`is-disabled`]: isDisabled,\n\t\t\t\t[`is-focused`]: isFocused,\n\t\t\t\t[`${rootClass}--size${size}`]: typeof size !== \"undefined\",\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n\t\tstyle=${ifDefined(styleMap({\n\t\t\t...customStyles,\n\t\t}))}\n\t\tid=${ifDefined(id)}\n\t\t@click=${onclick}\n\t>\n\t\t\t${when(backgroundColor, () => html`<div class=\"${rootClass}-background\" style=${ifDefined(styleMap({ backgroundColor }))}></div>`)}\n\t\t\t${OpacityCheckerboard({\n\t\t\t\trootClass: backgroundColor ? `${rootClass}-image-wrapper` : undefined,\n\t\t\t\tcustomClasses: isLayer ? [`${rootClass}-layer-inner`] : !backgroundColor ? [`${rootClass}-image-wrapper`] : [],\n\t\t\t\tcontent: image ? [image] : [],\n\t\t\t})}\n\t\t</div>\n\t`\n};\n"],"names":[],"sourceRoot":""}