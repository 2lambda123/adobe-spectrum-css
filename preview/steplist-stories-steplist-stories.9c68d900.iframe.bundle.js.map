{"version":3,"file":"steplist-stories-steplist-stories.9c68d900.iframe.bundle.js","mappings":";;;AAsCA;;AASA;AAOA;AAIA;;AAEA;;AC6BA;AAMA;;;AAGA;AAtEA;AACA;AAQA;;AAIA;;AAEA;AAOA;;AAEA;AACA;AACA;;AAEA;AAEA;;AAMA;AACA;;AAEA;AACA;AAEA;;AAEA;;AAaA","sources":["webpack://@spectrum-css/preview/../components/tooltip/stories/template.js","webpack://@spectrum-css/preview/../components/steplist/stories/template.js"],"sourcesContent":["import { html } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { when } from \"lit/directives/when.js\";\n\nimport { Template as Icon } from \"@spectrum-css/icon/stories/template.js\";\n\nimport \"../index.css\";\n\nexport const Template = ({\n\trootClass = \"spectrum-Tooltip\",\n\tlabel,\n\tvariant = \"neutral\",\n\tplacement,\n\tisOpen = true,\n\tisFocused = false,\n\tshowOnHover = false,\n\t...globals\n}) => {\n\tconst { express } = globals;\n\n\ttry {\n\t\tif (!express) import(/* webpackPrefetch: true */ \"../themes/spectrum.css\");\n\t\telse import(/* webpackPrefetch: true */ \"../themes/express.css\");\n\t} catch (e) {\n\t\tconsole.warn(e);\n\t}\n\n\tlet variantIcon;\n\tif (variant === \"info\") {\n\t\tvariantIcon = \"Info\";\n\t} else if (variant === \"positive\") {\n\t\tvariantIcon = \"CheckmarkCircle\";\n\t} else if (variant === \"negative\") {\n\t\tvariantIcon = \"Alert\";\n\t}\n\n\treturn html`\n\t\t<span\n\t\t\tclass=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t[`${rootClass}--${variant}`]:\n\t\t\t\t\ttypeof variant !== \"undefined\" && variant !== \"neutral\",\n\t\t\t\t[`${rootClass}--${placement}`]: typeof placement !== \"undefined\",\n\t\t\t\t\"is-open\": isOpen,\n\t\t\t\t\"is-focused\": isFocused,\n\t\t\t})}\n\t\t>\n\t\t\t${when(variantIcon, () =>\n\t\t\t\tIcon({\n\t\t\t\t\ticonName: variantIcon,\n\t\t\t\t\tsize: \"m\",\n\t\t\t\t\tcustomClasses: [`${rootClass}-typeIcon`],\n\t\t\t\t})\n\t\t\t)}\n\t\t\t${when(\n\t\t\t\tlabel,\n\t\t\t\t() => html`<span class=\"${rootClass}-label\">${label}</span>`\n\t\t\t)}\n\t\t\t<span class=\"${rootClass}-tip\"></span>\n\t\t</span>\n\t`;\n};\n","import { html, nothing } from \"lit\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport { repeat } from \"lit/directives/repeat.js\";\nimport { ifDefined } from \"lit/directives/if-defined.js\";\n\nimport { Template as Tooltip } from \"@spectrum-css/tooltip/stories/template.js\";\n\nimport \"../index.css\";\n\nexport const SteplistItem = ({\n\trootClass,\n\tisSmall = false,\n\tisInteractive = false,\n\twithTooltip = false,\n\tlabel,\n\tariaPosInSet = 1,\n\tariaSetSize = 4,\n\tisComplete = false,\n\tisSelected = false,\n\tid,\n\t...globals\n}) => {\n\tconst labelMarkup =\n\t\t!isSmall && !withTooltip && typeof label !== \"undefined\"\n\t\t\t? html`<span class=\"spectrum-Steplist-label\">${label}</span>`\n\t\t\t: nothing;\n\n\tconst markerContainer = html`\n\t\t<span class=\"${rootClass}-markerContainer\">\n\t\t\t${withTooltip && !isSmall && typeof label !== \"undefined\"\n\t\t\t\t? Tooltip({\n\t\t\t\t\t\tlabel,\n\t\t\t\t\t\tisOpen: false,\n\t\t\t\t\t\tplacement: \"top\",\n\t\t\t\t\t\tshowOnHover: true,\n\t\t\t\t  })\n\t\t\t\t: nothing}\n\t\t\t<span class=\"${rootClass}-marker\"></span>\n\t\t</span>\n\t`;\n\n\treturn html`\n\t\t<div\n\t\t\tclass=${classMap({\n\t\t\t\t[`${rootClass}-item`]: true,\n\t\t\t\t\"is-complete\": isComplete,\n\t\t\t\t\"is-selected\": isSelected,\n\t\t\t\t\"u-tooltip-showOnHover\":\n\t\t\t\t\twithTooltip && !isSmall && typeof label != \"undefined\",\n\t\t\t})}\n\t\t\tid=${ifDefined(id)}\n\t\t\trole=\"listitem\"\n\t\t\taria-posinset=${ariaPosInSet}\n\t\t\taria-setsize=${ariaSetSize}\n\t\t\taria-label=${isSmall && !isInteractive ? ifDefined(label) : nothing}\n\t\t>\n\t\t\t${isInteractive\n\t\t\t\t? html` <a\n\t\t\t\t\t\tclass=${classMap({\n\t\t\t\t\t\t\t[`${rootClass}-link`]: true,\n\t\t\t\t\t\t\t\"is-complete\": isComplete,\n\t\t\t\t\t\t\t\"is-selected\": isSelected,\n\t\t\t\t\t\t})}\n\t\t\t\t\t\trole=\"link\"\n\t\t\t\t\t\taria-label=${isSmall ? ifDefined(label) : nothing}\n\t\t\t\t\t\ttabindex=${isSelected ? \"1\" : \"-1\"}\n\t\t\t\t  >\n\t\t\t\t\t\t${labelMarkup} ${markerContainer}\n\t\t\t\t  </a>`\n\t\t\t\t: html` ${labelMarkup} ${markerContainer}`}\n\t\t\t<span class=\"${rootClass}-segment\"></span>\n\t\t</div>\n\t`;\n};\n\nexport const Template = ({\n\trootClass = \"spectrum-Steplist\",\n\titems,\n\tisSmall = false,\n\tisInteractive = false,\n\twithTooltip = false,\n\tid,\n\tcustomClasses = [],\n\t...globals\n}) => {\n\tif (!items || !items.length) return html``;\n\n\treturn html`\n\t\t<div\n\t\t\tclass=${classMap({\n\t\t\t\t[rootClass]: true,\n\t\t\t\t[`${rootClass}--small`]: isSmall,\n\t\t\t\t[`${rootClass}--interactive`]: isInteractive,\n\t\t\t\t...customClasses.reduce((a, c) => ({ ...a, [c]: true }), {}),\n\t\t\t})}\n\t\t\tid=${ifDefined(id)}\n\t\t\trole=\"list\"\n\t\t>\n\t\t\t${repeat(items, (args, idx) =>\n\t\t\t\tSteplistItem({\n\t\t\t\t\trootClass: `${rootClass}`,\n\t\t\t\t\tisSmall,\n\t\t\t\t\tisInteractive,\n\t\t\t\t\twithTooltip,\n\t\t\t\t\t...args,\n\t\t\t\t\tariaPosInSet: idx + 1,\n\t\t\t\t\tariaSetSize: items.length,\n\t\t\t\t})\n\t\t\t)}\n\t\t</div>\n\t`;\n};\n"],"names":[],"sourceRoot":""}